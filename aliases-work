#!/usr/bin/env bash

# Identify the current shell
MYSHELL=$(basename $(ps h p $$ | /bin/awk '{ print $NF }' | sed 's/-//g'))
if [[ $MYSHELL != "bash" ]]; then
  return;
fi

# If xterm, put cwd in title
#setenv HOST `hostname`
#alias xsettitle 'echo -n "]2;${HOST}:\!*"'
#if ("$TERM" == "xterm") then
#  alias precmd 'xsettitle $cwd; set prompt = "<%c> "'
#else
#  alias precmd 'set prompt = "<%c> "'
#endif

unset -f P
P() {
  if [[ -f ${1} ]] && [[ "${1}" == "sim.out" ]]; then
    if [[ $PAGER =~ vile ]]; then
      $PAGER -c 'silent! /error:\|Backtrace:' -c 'norm zt' "$@"
      return
    elif [[ $PAGER =~ less ]]; then
      $PAGER -p error: "$@"
      return
    fi
  fi

  $PAGER "$@"
}


#=======================================================================================================================
# EDITOR                                                                                                            {{{1
#=======================================================================================================================
alias v="gvim_func -geometry 273x66+0+0 ${STEM:+--servername $STEM}"
alias vlog="v -p *ChkL3.log *Seq.log dsp_ch.txt sim.out -c 'set autoread'"
alias vc='v --remote-silent'

alias e="emacs_func ${STEM+--socket-name=${STEM//\//_}}"


# Project Aliases
# alias as_bsub="lsf_bsub -Is -R 'rusage[mem=2000]' -q high -P aspen-ver"
#alias amdfind='find $REPO_PATH -path "$REPO_PATH/simenv/build" -prune -or -path "$REPO_PATH/.ccache" -prune -or -path "$REPO_PATH/.autoio_cache" -prune -or -path "$REPO_PATH/release_gate_run" -prune -or -print'
# Use p4 have
alias amdfind="find $REPO_PATH -type d \( -name _env -o -name dfx -o -name emu -o -name fp -o -name powerPro -o -name build -o -name sim -o -name release_gate_tmp -o -wholename '*/ch/tc' -o -wholename '*/ch/tb' -o -wholename '*/ch/verif/dft' -o -wholename '*/txn/gen' -o -wholename '*/generated' \) -prune -o -type f ! \( -name '.*' -o -iname '*.log' -o -iname '*.out' -o -iname '*.so' -o -iname '*.cc.o' -o -iname '*tags*' \) -print 2> /dev/null"
alias amdgrep='find $REPO_PATH -path "$REPO_PATH/simenv/build" -prune -or -path "$REPO_PATH/.ccache" -prune -or -path "$REPO_PATH/.autoio_cache" -prune -or -path "$REPO_PATH/release_gate_run" -prune -or -print | xargs grep'


# Building and Compiling
alias sbi='. /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash'
alias mkv='mkverdi -nolsf $(grep -Po "\-model\s*\S+" sim.out) -rc ~/novas.rc -guiConf ~/novas.conf -tkName "verdi_$(tmux display-message -p "#S:#I.#P")" &'
alias findFirstError='findFirstError --tkName "verdi_$(tmux display-message -p "#S:#I.#P")"'
alias cid='cat ${REPO_PATH+$REPO_PATH/}configuration_id'
alias bj='lsf_bjobs -w'
alias bjj='lsf_bjobs -w | command grep "JOBID\|$$"'
alias bk='lsf_bkill'
alias bq='lsf_bqueues'

unset -f bjg
bjg() { bj | \grep "${1:-$$:}"; }

alias wtf='WhyTheFail'
alias lmn='ljd -nomail -l'
alias rgf_l3='regenerate_fail.bash -log mine -r \"-avf \'"'-/ChkL3.Debug/ 1\'"'\"'
alias rgf_ras='regenerate_fail.bash -log ras -forceBuild'
alias trapbug='P4DIFF= s_trapbug -bug'


# Misc
alias rr='~/bin/rerun'
alias rrb='rr --norun --build'
alias rrc='rr --norun --clean'
alias rrcb='rr --norun --clean --build'
alias bca='build -clean_all'
alias rrrbr='rr --recompile-all --build'
alias rrbr='rr --build'
alias rrcr='rr --clean'
alias rrdbg=$'rr --add \'-avf "--/ChkL3.Debug/"\' --fsdb --dsp'

alias rg='release_gate'
alias rgd='release_gate -donate'
alias rgg='release_gate_gui'
alias perr="perl -ne 'print if /error:/../:error/;exit if /:error/'"
alias bu='bucket'
alias bus='bucket -s'
alias bus1='bucket -n 1'
alias bus3='bucket -n 3'
alias busw='watch -n15 "bucket -n 1"'
alias toclippy="sed -e 's/$/
/' | tee ~/clippy.txt"

alias xt='xterm -geometry 273x60+1919+21 &'
alias xtr='resize -s 60 273'
# alias xtr='wmctrl -i -r $(printf "0x0%x" $(xdotool getactivewindow)) -b add,maximized_vert; wmctrl -i -r $(printf "0x0%x" $(xdotool getactivewindow)) -e 0,1920,25,1915,1144'
alias tmxvnc='tmux new-window -d -n "XVNC" "x11vnc"'



#=======================================================================================================================
# PERFORCE                                                                                                          {{{1
#=======================================================================================================================
alias pf='p4w'
alias pfa='p4 add'
alias pfd='p4 diff'
alias pfd2='p4diff2'
alias pfe='p4 edit'
alias pfh='pf help'
alias pfo='p4 opened'
alias pfco='p4_mkwa -change_branch'
alias pfres='p4 resolve'
alias pfrev='p4 revert'
alias pflog='p4 filelog -stl'
alias pfs='p4w submit'
alias pful='pfu @latest'

# unset -f pfop
# pfop() {                                                                                                        # {{{2
#   while read; do
#     local d=$(sed -e 's/#.*$//' <<< $REPLY);
#     local f=$(p4 where $d | cut -d " " -f3);
#     sed "s:$d:$f:" <<< $REPLY;
#   done < <(p4 opened)
# }

unset -f pfor
pfor() {
  if (( $# > 0 )); then
    p4 opened "${1}" | sed -r -e "s/#.*$//" -e "s:^//depot/[^/]*/(trunk|branches/[^/]*):$STEM:" -e "s:$PWD/::"
  else
    p4 opened | sed -r -e "s/#.*$//" -e "s:^//depot/[^/]*/(trunk|branches/[^/]*):$STEM:" -e "s:$PWD/::"
  fi
}

unset -f pfu
pfu() {                                                                                                           # {{{2
  # Save ENV variables
  local _env_tmux=$TMUX
  local _env_tmux_pane=$TMUX_PANE

  p4w update_env "$@"
  local ret=$?

  # Restore ENV variables
  export TMUX=$_env_tmux
  export TMUX_PANE=$_env_tmux_pane

  if [[ $ret != 0 ]]; then return; fi

  ~kshenoy/bin/gentags --create
  sosa
  [[ -f ~/.fzf.bash ]] && . ~/.fzf.bash
}

# Generate a list of files
unset -f pf_list
pf_list() {                                                                                                       # {{{2
  if [[ "$1" == "--check" ]] && [[ -f ${STEM:+$STEM/}.filelist ]]; then
    return 0
  fi

  [[ -z $STEM ]] && return 1
  p4 have | awk {'print $3'} >| $STEM/.filelist
}

# Find a file
unset -f pff
pff() {                                                                                                           # {{{2
  pf_list --check
  if [[ ! -s ${STEM:+$STEM/}.filelist ]]; then
    ag --nocolor --no-numbers "$@" ${STEM:+$STEM/}.filelist
  else
    p4 have | awk {'print $3'} | command grep -P "$@"
  fi
}

# Grep from the list of files in the repo
unset -f pfg
pfg() {                                                                                                           # {{{2
  pf_list --check

  if [[ -s ${STEM:+$STEM/}.filelist ]]; then
    local _filter='""'
    if [[ "$1" == "-g" ]]; then
      _filter="$2"
      shift 2
    fi
    # echo $_filter

    # If $_filter is empty, it acts as cat
    echo "ag $@ $(command grep -P $_filter ${STEM:+$STEM/}.filelist)"
    ag $@ $(command grep -P $_filter ${STEM:+$STEM/}.filelist)
  else
    ag $@
  fi
}
# }}}2

alias pfgc='pfg --cpp'
alias pfgch="pfg -g '\.(h|hh|hpp|tpp)$'"
alias pfgcc="pfg -g '\.(c|cc|cpp|C|CC)$'"
alias pfgsbs="pfg -g '\.sbs$'"



#=======================================================================================================================
# WORKAREA                                                                                                          {{{1
#=======================================================================================================================
# Declaring these as environment variables instead of regular ones allows access from within vim
unset -f make_wa_vars
make_wa_vars() {                                                                                                  # {{{2
  local _proj _ch _wa _scr
  for _proj in as ah br; do
    local _proj_full=$(sed -e 's/as/ASPEN/i' -e 's/ah/ASPEN_HIGHLANDS/i' -e 's/br/BRECKENRIDGE/i' <<< $_proj)

    for _ch in {0..1}; do
      eval "export ${_proj}${_ch}='/proj/ch_func_dev${_ch}/${_proj_full}'"
      eval "export ${_proj}${_ch}ks='/proj/ch_func_dev${_ch}/${_proj_full}/kshenoy'"
      for _wa in {1..6}; do
        eval "export ${_proj}${_ch}${_wa}='/proj/ch_func_dev${_ch}/${_proj_full}/kshenoy/${_proj}${_ch}${_wa}'"
      done
    done

    for _scr in {0..2}; do
      eval "export ${_proj}s${_scr}='/proj/ch_func_gen_scratch${_scr}/${_proj_full}/kshenoy'"
    done
  done
}
make_wa_vars

# Dynamic variables (Recomputed everytime path changes via preprompt or equivalent)
# If $REPO_PATH is set, expand ${...} to $REPO_PATH/ (append trailing slash)
# This allows us to use $rtl etc as an absolute path when $REPO_PATH is set and when bootenv isn't done, as a relative path
#
# Note that something similar could be achieved by setting CDPATH=$REPO_PATH
# And as long as we're in a CH workarea, all the below variables should work the same
# However, if we're in a non-CH repository like VH then it'll not work.
# Hence, I've created explicit variables by basing them off ch which in turn is set based on the value of ANCHOR_ch
dyn_vars() {                                                                                                      # {{{2
  export ch="${ANCHOR_ch-${REPO_PATH+$REPO_PATH/}ch}"
  export reg="${ANCHOR_local_rdl-${REPO_PATH+$REPO_PATH/}meta/registers}"
  export r="${ch}/rtl"
  export tb="${ch}/tb"
  export tc="${ch}/tc"
  export v="${ch}/verif"
  export cl23="${v}/chk_l2l3"
  export al3="${v}/l3/arch_l3"
  export al3c="${v}/l3/arch_l3/arch_lci"
  export al3f="${v}/l3/arch_l3/arch_l3f"
  export al3s="${v}/l3/arch_l3/arch_slice"
  export al3x="${v}/l3/arch_l3/arch_lxi"
  export cl3="${v}/chk_l3"
  export clk="${v}/chk_lock"
  export txn="${v}/txn"
  export vcov="${v}/coverage"
  export avf="${REPO_PATH+$REPO_PATH/}import/avf"
  export sim="${REPO_PATH+$REPO_PATH/}sim"
}
dyn_vars


unset -f mkwa
mkwa() {                                                                                                          # {{{2
  _mkwa_help() {
    echo 'SYNTAX:'
    echo '  mkwa PROJ[/BRANCH=PROJ_trunk][@CHANGELIST=latest]'
    echo '  mkwa tb_env'
  }

  if [[ -f "$1" ]]; then
    local _temp=$(sed 's/p4_mkwa\s\+-configuration_id\s\+//' "$1")
  else
    local _temp=${1}
  fi

  local _proj=""
  local _branch=""
  local _cl=""
  local _fg_red=$(tput setaf 1)
  local _fg_green=$(tput setaf 2)
  local _reset=$(tput sgr0)

  if [[ "${_temp}" =~ @ ]]; then
    local _cl=" -changelist ${_temp#*@}"
    _temp=${_temp%@*}
  fi
  # echo $_temp

  if [[ "$_temp" =~ / ]]; then
    local _branch=" -branch_name ${_temp#*/}"
    _proj=${_temp%/*}
  else
    _proj=$_temp
  fi
  # echo $_temp

  case ${_proj} in
    as)
      _proj="aspen"
      ;;&
    ah)
      _proj="aspen_highlands"
      ;;&
    br)
      _proj="breckenridge"
      ;;&
    vh)
      _proj="valhalla"
      ;;&
    zn)
      _proj="zen"
      ;;&
    *)
      if [[ -z "${_proj}" ]]; then
        echo -e "${_fg_red}ERROR${_reset}: Project not specified\n"; _help
        return 1
      fi
      ;;
  esac

  # Save ENV variables
  local _env_tmux=$TMUX
  local _env_tmux_pane=$TMUX_PANE

  local _cmd="p4_mkwa -codeline ${_proj}${_branch}${_cl}"
  echo -e "${_cmd}\n"
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && export LANG=en_US.UTF-8
  $_cmd

  # Restore ENV variables
  export TMUX=$_env_tmux
  export TMUX_PANE=$_env_tmux_pane

  if [[ -z "$STEM" ]]; then
    return 1
  fi

  p4 have | awk {'print $3'} >| .filelist

  # Start an emacs daemon
  # echo "${_fg_green}[Starting emacs daemon...]${_reset}"
  # ~kshenoy/bin/emacs_daemon -s &> /dev/null &

  # Source aliases...
  echo "${_fg_green}[Sourcing aliases...]${_reset}"
  [[ -f ~/.dotfiles/aliases ]] && . ~/.dotfiles/aliases

  # Set project root for emacs-projectile
  command cp $as0ks/projectile $STEM/.projectile

  # Create tags
  echo "${_fg_green}[Generating tags...]${_reset}"
  ~kshenoy/bin/gentags --create
}


unset -f wa_list
wa_list() {                                                                                                       # {{{2
  local _proj _ch _wa _path
  for _ch in {0..1}; do
    for _proj in as ah br; do
      local _proj_ucase=$(tr 'a-z' 'A-Z' <<< ${_proj})
      for _wa in {1..6}; do
        _path="/proj/ch_func_dev${_ch}/${_proj_ucase}/kshenoy/${_proj}${_ch}${_wa}"
        if [[ -d ${_path} ]] && [[ "$(ls -A ${_path})" ]]; then
          echo ${_path}:
          ls ${_path} | sed 's/^/  /'
        fi
      done
    done
  done
}


unset -f lenv
lenv() {                                                                                                          # {{{2
  # Save ENV variables
  local _env_tmux=$TMUX
  local _env_tmux_pane=$TMUX_PANE
  local _old_pwd=$PWD
  local _workarea=${1:-$PWD}

  # Start emacs daemon if one isn't present
  # [[ -n "${_workarea}" ]] && ~kshenoy/bin/emacs_daemon -s ${workarea//\//_} &> /dev/null &

  command pushd "${_workarea}" > /dev/null
  sbi && loadenv
  local ret=$?

  # Restore ENV variables
  export TMUX=$_env_tmux
  export TMUX_PANE=$_env_tmux_pane

  if [[ $ret != 0 ]]; then return; fi

  # Source aliases etc.
  sosa; sosf
  [[ -f ~/.fzf.bash ]] && . ~/.fzf.bash

  command popd > /dev/null
}

unset -f pfrem
pfrem() {                                                                                                         # {{{2
  local _workarea=$(readlink -f ${1:-${REPO_PATH:-$PWD}})
  if [[ $_workarea != $REPO_PATH ]]; then
    command cd $_workarea
    . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash
    loadenv
  fi

  local _scratch_dir=$(readlink -f ${_workarea}/build | command sed 's/build$//')
  echo -e "\nDeleting workarea: '$_workarea'"
  cd $_workarea/..

  p4w remove $_workarea
  local _exit_code=$?
  if (( $_exit_code != 0 )); then
    return $_exit_code;
  fi

  echo -e "\nDeleting workarea from scratch disk..."
  echo "  command rm -rf $_scratch_dir"
  rm_rf_silent $_scratch_dir

  # Kill emacs daemon. Use explicit path to avoid kill any other daemons
  ~kshenoy/bin/emacs_daemon -k ${_workarea//\//_}
}

unset -f trapbug_rm
trapbug_rm() {                                                                                                    # {{{2
ssh atlvsub01 xargs /home/ainfra/bin/rm_defunct_bug_data --bug_data_path /proj/aspen_bug_data/ASPEN --bug_dirs << BUGS
"$@"
BUGS
}
# }}}2
# }}}1



alias g++="/tool/pandora64/.package/gcc-6.3.0/bin/g++ -std=c++14"
alias clang++="/tool/pandora64/.package/llvm-4.0.0-gcc630/bin/clang++ -std=c++14"

unset -f psig
psig() {
  perl -lne 'if(/^\s+-+$/../^\s*$/){if(/^\s+-+$/){$c=0;}elsif(/^\s*$/){print "  ($c) $s";}else{$c++;}}else{s/^\s+|\s+$//g;$s=$_}' $1
}

unset -f rgsig
rgsig() {
  for i in $(grep FAIL ${REPO_PATH+$REPO_PATH/}release_gate_tmp/release_gate.log | colm -1); do
    local _sim=${i##*release_gate_tmp/}
    _sim=${_sim%%/*}
    echo -e "\n${_sim}";
    psig $i;
  done
}

unset -f rgww
rgww() {
  for i in `g FAIL ${REPO_PATH+$REPO_PATH/}release_gate_tmp/release_gate.log | colm -1`; do
    local _sim=${i##*release_gate_tmp/}
    _sim=${_sim%%/*}
    echo -e "\n${_sim}";
    pww $i;
  done
}

unset -f plastlock
plastlock() {
  for i in $*; do
    echo -e "\n$i:"
    perl -ne 'if(/BUS_LOCK|SYS_MGMT/){$p="";}$p.=$_;END{print $p;}' $i
  done
}

unset -f vsig
vsig() {
  file_lnum=$(\grep -Po -m1 '(?<=source\=)[^:]+:\d+' summary.rj)
  file=${file_lnum%:*}
  lnum=${file_lnum#*:}

  file=$(pff ${file})
  v +$lnum $file -c "norm! zv"
}

unset -f tel
tel() {
  perl -aF/,/ -lne 'print "\nName: $F[1], $F[2]\nCube: $F[0]\nExt : $F[3]" if /'$1'/i' ~/tel.csv;
}

unset -f dotty
dotty() {
  for i in $*; do
    dot -Tgif -o `basename $i .gv`.gif $i
  done
}

unset -f but
but() {
  model=unittest_${1#unittest_}
  shift;

  echo build -model $model
  rerun --norun --build --model $model $@
  local _ret=$?
  if (( $_ret != 0 )); then
    return $_ret;
  fi

  if [[ ${model} =~ _dbg$ ]]; then
    echo gdb $REPO_PATH/build/${model}/${model}
    gdb $REPO_PATH/build/${model}/${model}
  else
    echo $REPO_PATH/build/${model}/${model}
    $REPO_PATH/build/${model}/${model}
  fi
}

unset -f wtff
wtff() {
  model=`basename ${1%_rg.build.log}`
  wtf -m $model
}
