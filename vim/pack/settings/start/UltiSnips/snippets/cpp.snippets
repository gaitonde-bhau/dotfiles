# cpp.snippets - Snippets for c++ file type
#
# $0 - Final position of cursor
#
priority -49
extends c
# We want to overwrite everything in parent ft.
priority -48


#=======================================================================================================================
# Global functions                                                                                                  {{{1
#
global !p
from UltiSnips_globals import *
endglobal



#=======================================================================================================================
# Headers                                                                                                           {{{1
#
snippet inc "#include <>" b
#include ${2/>/</}$1`!p
opts = ['algorithm', 'array', 'cassert', 'cstdint', 'fstream', 'iostream', 'iterator',
        'list', 'map', 'memory', 'set', 'sstream', 'string', 'unordered_map', 'unordered_set', 'utility', 'vector']
opts.sort()
if snip.basename:
  opts.insert(0, snip.basename + '.h')
snip.rv = complete(t[1], opts)
`${2:`!p
snip.rv = '"' if (t[1][-2:] == '.h') else ">"
`}
endsnippet

#=======================================================================================================================
# Namespaces                                                                                                        {{{1
#
snippet ns "namespace ..." b
namespace${1/.+/ /m}${1:nCh} {

  ${VISUAL}${0}

} // END `!p
snip.rv = "anonymous " if (len(t[1]) == 0) else ""
`namespace${1/.+/ /m}$1
endsnippet


snippet uns "using namespace ..." b
using namespace ${1:std};
endsnippet



#=======================================================================================================================
# Loops                                                                                                             {{{1
#
snippet for "C++ style for..." b
for (auto ${1:i} = 0; $1 < ${2:count}; $1++) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet forr "Ranged for loop" b
for (auto ${1:i}: ${2:v}) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet



#=======================================================================================================================
# Using/typedefs/templates                                                                                          {{{1
#
snippet tp "template <typename T>" b
template <typename ${1:T}>
endsnippet

snippet tpus "template using" b
template <typename ${1:T}>
using $2 = $0
endsnippet

snippet 'us(ing)?' "using (typedef) ..." rb
using ${1} = ${0}
endsnippet



#=======================================================================================================================
# Classes                                                                                                           {{{1
#
snippet 'cl(ass)?' "class" rw
class ${1:`!p snip.rv = "c" + snip.basename.title().replace('_', '') or "name"`} {
  public:
    ${1/(\w+).*/$1/}( ${2:arguments} );
    virtual ~${1/(\w+).*/$1/}(){}

  private:
};
endsnippet


#=======================================================================================================================
# Smart Pointers                                                                                                          {{{1
#
snippet sp "std::shared_ptr" w
std::shared_ptr<${1:${VISUAL}}>
endsnippet

snippet ms "std::make_shared" w
std::make_shared<${1:${VISUAL}}>($0)
endsnippet

snippet ssp "std::smart_ptr" w
std::$1`!p snip.rv = complete(t[1], ['shared', 'unique', 'weak'])`_ptr<${2:${VISUAL}}>
endsnippet

snippet sms "std::make_smart" w
std::make_$1`!p snip.rv = complete(t[1], ['shared', 'unique', 'weak'])`<${2:${VISUAL}}>($0)
endsnippet

snippet bsp "boost::shared_ptr" w
boost::shared_ptr<${1:${VISUAL}}>
endsnippet

snippet bms "boost::make_shared" w
boost::make_shared<${1:${VISUAL}}>($0)
endsnippet


#=======================================================================================================================
# Casting                                                                                                           {{{1
#
snippet sca "static_cast<T>()" w
static_cast<$1>(${0:${VISUAL}})
endsnippet

snippet dca "dynamic_cast<T>()" w
dynamic_cast<$1>(${0:${VISUAL}})
endsnippet

snippet cca "const_cast<T>()" w
const_cast<$1>(${0:${VISUAL}})
endsnippet

snippet spc "std::static_pointer_cast<T>()" w
std::static_pointer_cast<$1>(${0:${VISUAL}})
endsnippet

snippet dpc "std::dynamic_pointer_cast<T>()" w
std::dynamic_pointer_cast<$1>(${0:${VISUAL}})
endsnippet

snippet cpc "std::const_pointer_cast<T>()" w
std::const_pointer_cast<$1>(${0:${VISUAL}})
endsnippet

snippet bspc "boost::static_pointer_cast<T>()" w
boost::static_pointer_cast<$1>(${0:${VISUAL}})
endsnippet

snippet bdpc "boost::dynamic_pointer_cast<T>()" w
boost::dynamic_pointer_cast<$1>(${0:${VISUAL}})
endsnippet

snippet bcpc "boost::const_pointer_cast<T>()" w
boost::const_pointer_cast<$1>(${0:${VISUAL}})
endsnippet



#=======================================================================================================================
# STL                                                                                                               {{{1
#
snippet be "std::begin(param), std::end(param)" w
std::begin(${1:${VISUAL:container}}${1/^.*?(-)?(>)?$/(?2::(?1:>:))/}), std::end($1${1/^.*?(-)?(>)?$/(?2::(?1:>:))/})
endsnippet


# Containers -------------------------------------------------------------------------------------------------------{{{2
snippet map "std::map" w
std::map<${1:key}, ${2:value}>$0
endsnippet

snippet umap "std::unordered_map" w
std::unordered_map<${1:key}, ${2:value}>$0
endsnippet

snippet list "std::list" w
std::list<${1:${VISUAL:T}}>$0
endsnippet

snippet vec "std::vector" w
std::vector<${1:${VISUAL:T}}>$0
endsnippet

snippet arr "std::array" w
std::array<${1:${VISUAL:T}}, ${2:N}>$0
endsnippet


# Idioms -----------------------------------------------------------------------------------------------------------{{{2
snippet erm ".erase(std::remove(...))"
${1:${VISUAL:container}}.erase(std::remove(std::begin($1), std::end($1), ${2:value}), std::end($1));
endsnippet


# Non-modifying sequence operations --------------------------------------------------------------------------------{{{2
snippet alo "std::all_of"
if (std::all_of(std::begin(${1:${VISUAL:container}}), std::end($1),
      [](auto const& ${2:i}) {
        $0
      })
   ) {
}
endsnippet

snippet ano "std::any_of"
if (std::any_of(std::begin(${1:${VISUAL:container}}), std::end($1),
      [](auto const& ${2:i}) {
        $0
      })
   ) {
}
endsnippet

snippet nno "std::none_of"
if (std::none_of(std::begin(${1:${VISUAL:container}}), std::end($1),
      [](auto const& ${2:i}) {
        $0
      })
   ) {
endsnippet

snippet fre "std::for_each"
std::for_each(std::begin(${1:${VISUAL:container}}), std::end($1),
  [](auto const& ${2:i}) {
    $0
  });
endsnippet

snippet cnt "std::count"
auto count = std::count(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
endsnippet

snippet cni "std::count_if"
auto count = std::count_if(std::begin(${1:${VISUAL:container}}), std::end($1),
  [](auto const& ${2:i}) {
    $0
  });
endsnippet

snippet fnd "std::find"
auto searchIt = std::find(std::begin(${1:${VISUAL:container}}), std::end($1), ${0:<value>});
if (searchIt != std::end($1)) {
}
endsnippet

snippet fni "std::find_if"
auto searchIt = std::find_if(std::begin(${1:${VISUAL:container}}), std::end($1),
  [](auto const& ${2:i}) {
    $0
  });
if (searchIt != std::end($1)) {
}
endsnippet

snippet fin "std::find_if_not"
auto searchIt = std::find_if_not(std::begin(${1:${VISUAL:container}}), std::end($1),
  [](auto const& ${2:i}) {
    $0
  });
if (searchIt != std::end($1)) {
}
endsnippet


# Modifying sequence operations ------------------------------------------------------------------------------------{{{2
snippet cpy "std::copy"
std::copy(std::begin(${1:${VISUAL:src}}), std::end($1), std::back_inserter(${2:dest}));
endsnippet

snippet cpi "std::copy_if"
std::copy_if(std::begin(${1:${VISUAL:src}}), std::end($1), std::back_inserter(${2:dest}),
  [](auto const& ${3:i}) {
    $0
  });
endsnippet

snippet fil "std::fill"
std::fill(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
endsnippet


# Minimum/maximum operations ---------------------------------------------------------------------------------------{{{2
snippet mne "std::min_element"
std::min_element(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet

snippet mxe "std::max_element"
std::max_element(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet

snippet mme "std::minmax_element"
std::minmax_element(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet


# String/Streams ---------------------------------------------------------------------------------------------------{{{2
snippet sso "std::ostringstream"
std::ostringstream ${1:oss};
oss << ${VISUAL}$0
endsnippet



#=======================================================================================================================
# Skeleton                                                                                                          {{{1
##
snippet _skel "Template for new files" b
#include <iostream>

using namespace std;

int main(${1: int argc, const char *argv[] }){
$0
}
endsnippet



# vim:ft=snippets:
