# cpp.snippets - Snippets for c++ file type
#
# $0 - Final position of cursor
#
priority -49
extends c
# We want to overwrite everything in parent ft.
priority -48


#=======================================================================================================================
# Global functions                                                                                                  {{{1
#
global !p
from UltiSnips_globals import *
endglobal



#=======================================================================================================================
# Headers                                                                                                           {{{1
#
snippet inc "#include <>" b
#include ${2/>/</}$1`!p
opts = ['algorithm', 'array', 'cassert', 'cstdint', 'cstdio', 'cstdlib', 'cstring', 'fstream', 'iostream', 'list', 'map', 'memory',
        'sstream', 'string', 'unordered_map', 'vector']
opts.sort()
if snip.basename:
  opts.insert(0, snip.basename + '.h')
snip.rv = complete(t[1], opts)
`${2:>}
endsnippet



#=======================================================================================================================
# Namespaces                                                                                                        {{{1
#
snippet ns "namespace ..." b
namespace${1/.+/ /m}${1:nCh} {

  ${VISUAL}${0}

} // END `!p
snip.rv = "anonymous " if (len(t[1]) == 0) else ""
`namespace${1/.+/ /m}$1
endsnippet


snippet uns "using namespace ..." b
using namespace ${1:std};
endsnippet



#=======================================================================================================================
# Loops                                                                                                             {{{1
#
snippet for "C++ style for..." b
for (auto ${1:i} = 0; $1 < ${2:count}; ++$1) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet forr "Ranged for loop" b
for (auto ${1:i}: ${2:v}) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet



#=======================================================================================================================
# Using/typedefs/templates                                                                                          {{{1
#
snippet tp "template <typename T>" b
template <typename ${1:T}>
endsnippet

snippet tpus "template using" b
template <typename ${1:T}>
using $2 = $0
endsnippet

snippet 'us(ing)?' "using (typedef) ..." rb
using ${1} = ${0}
endsnippet



#=======================================================================================================================
# Classes                                                                                                           {{{1
#
snippet 'cl(ass)?' "class" rw
class ${1:`!p snip.rv = "c" + snip.basename.title().replace('_', '') or "name"`} {
  public:
    ${1/(\w+).*/$1/}( ${2:arguments} );
    virtual ~${1/(\w+).*/$1/}(){}

  private:
};
endsnippet


#=======================================================================================================================
# Smart Pointers                                                                                                          {{{1
#
snippet sp "std::shared_ptr" w
std::shared_ptr<${1:${VISUAL}}>
endsnippet

snippet ms "std::make_shared" w
std::make_shared<${1:${VISUAL}}>($0)
endsnippet

snippet ssp "std::smart_ptr" w
std::$1`!p snip.rv = complete(t[1], ['shared', 'unique', 'weak'])`_ptr<${2:${VISUAL}}>
endsnippet

snippet sms "std::make_smart" w
std::make_$1`!p snip.rv = complete(t[1], ['shared', 'unique', 'weak'])`<${2:${VISUAL}}>($0)
endsnippet

snippet bsp "boost::shared_ptr" w
boost::shared_ptr<${1:${VISUAL}}>
endsnippet

snippet bms "boost::make_shared" w
boost::make_shared<${1:${VISUAL}}>($0)
endsnippet


#=======================================================================================================================
# Casting                                                                                                           {{{1
#
snippet sca "static_cast<T>()" w
static_cast<${1:${VISUAL}}>($0)
endsnippet

snippet dca "dynamic_cast<T>()" w
dynamic_cast<${1:${VISUAL}}>($0)
endsnippet

snippet cca "const_cast<T>()" w
const_cast<${1:${VISUAL}}>($0)
endsnippet

snippet spc "std::static_pointer_cast<T>()" w
std::static_pointer_cast<${1:${VISUAL}}>($0)
endsnippet

snippet dpc "std::dynamic_pointer_cast<T>()" w
std::dynamic_pointer_cast<${1:${VISUAL}}>($0)
endsnippet

snippet cpc "std::const_pointer_cast<T>()" w
std::const_pointer_cast<${1:${VISUAL}}>($0)
endsnippet

snippet bspc "boost::static_pointer_cast<T>()" w
boost::static_pointer_cast<${1:${VISUAL}}>($0)
endsnippet

snippet bdpc "boost::dynamic_pointer_cast<T>()" w
boost::dynamic_pointer_cast<${1:${VISUAL}}>($0)
endsnippet

snippet bcpc "boost::const_pointer_cast<T>()" w
boost::const_pointer_cast<${1:${VISUAL}}>($0)
endsnippet



#=======================================================================================================================
# STL                                                                                                               {{{1
#
snippet be "<STL>.begin(), <STL>.end()" w
${1:${VISUAL:v}}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet forbe "Iterate over STL container" b
for (${1:::std::vector<int>}::const_iterator ${3:it}=${2:v}.begin(), ${4:it_last}=$2.end();
     $3 != $4; ++$3) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet map "std::map" w
std::map<${1:key}, ${2:value}>$0
endsnippet

snippet umap "std::unordered_map" w
std::unordered_map<${1:key}, ${2:value}>$0
endsnippet

snippet list "std::list" w
std::list<${1:${VISUAL:T}}>$0
endsnippet

snippet 'vec(tor)?' "std::vector" rw
std::vector<${1:${VISUAL:T}}>$0
endsnippet

snippet 'arr(ay)?' "std::array" rw
std::array<${1:${VISUAL:T}}, ${2:N}>$0
endsnippet


# vim:ft=snippets:
