# cpp.snippets - Snippets for c++ file type
#
# $0 - Final position of cursor
#
priority -49
extends c
# We want to overwrite everything in parent ft.
priority -48

#===========================================================================
# Global functions
#
global !p
from UltiSnips_globals import *
endglobal



#===========================================================================
# Headers/Namespaces
#
snippet inc "#include <>" b
#include <$1`!p
opts = ['cassert', 'cstdio', 'cstdlib', 'cstring', 'fstream', 'iostream', 'sstream', 'string', 'array']
if snip.basename:
  opts.insert(0, snip.basename + '.h')
snip.rv = complete( t[1], opts )
`>
endsnippet


snippet ns "namespace ..."
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
  ${VISUAL}${0}
} // END namespace${1/.+/ /m}$1
endsnippet


snippet uns "using namespace ..."
using namespace ${1:std};
endsnippet



#===========================================================================
# Loops
#
snippet for "C++ style for..." b
for (auto ${1:i} = 0; $1 < ${2:count}; ++$1) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet forr "Ranged for loop" b
for (auto ${1:i}: ${2:v}) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet



#===========================================================================
# Classes
#
snippet 'cl(ass)?' "class" r
class ${1:`!p snip.rv = snip.basename or "name"`} {
  public:
    ${1/(\w+).*/$1/}( ${2:arguments} );
    virtual ~${1/(\w+).*/$1/}(){}

  private:
};
endsnippet


#===========================================================================
# Shared Ptrs
#
snippet 'bsp' "boost::shared_ptr" w
::boost::shared_ptr< $1 > $0
endsnippet

snippet 'bms' "boost::make_shared" w
::boost::make_shared< $1 >($0)
endsnippet

snippet 'ssp' "std::shared_ptr" w
::std::shared_ptr< $1 > $0
endsnippet

snippet 'sms' "std::make_shared" w
::std::make_shared< $1 >($0)
endsnippet

snippet 'sup' "std::unique_ptr" w
::std::unique_ptr< $1 > $0
endsnippet

snippet 'smu' "std::make_unique" w
::std::make_unique< $1 >($0)
endsnippet


# vim:ft=snippets:
