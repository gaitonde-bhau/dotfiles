#!/usr/bin/env perl

#=======================================================================================================================
# POD                                                                                                               {{{1
#=======================================================================================================================
=head1 NAME

 wim

=head1 AUTHOR

 Kartik Shenoy

=head1 SYNOPSIS

 usage: vim [OPTIONS]
        command1 | vim | command2

=head1 DESCRIPTION

 A simple wrapper around vim which provides the --config option to allow using a custom directory instead of ~/.vim

 It also allows using vim interactively in the middle of a unix pipeline to edit the data piped between commands.
 Vim will have the full data being piped from command1 loaded into it, and when you close it, that data will be piped
 into command2. This is based on vipe from moreutils by Joey Hess.

 Note that if vim is used in the middle of a pipe in read-only mode, we assume that it's used as a pager and don't dump the contents to the terminal as

=head1 OPTIONS

      --config <folder>  Use the specified folder instead of ~/.vim.
                         If set to NONE then ignores the user config (~/.vimrc and ~/.vim/*)
  -h, --help             Print this followed by vim's help

=cut
# }}}1

use strict;
use diagnostics;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use File::Basename;
use File::Temp q{tempfile};

Getopt::Long::Configure("bundling");
Getopt::Long::Configure("pass_through");

my %opts = (
  'config' => ""
);

# Since this is a wrapper, after processing the extra options I have to invoke the non-wrapper version to pass vim its
# base options so find the root executable to call.
my $root_exec = dirname($0)  . "/vim_path/" . basename($0);
unless (-f $root_exec) {
  foreach my $i (`bash -c "type -a \$(basename $0)"`) {
    if ($i !~ $0) {
      $root_exec = (split(/\s+/, $i))[-1];
      last;
    }
  }
}
# print Dumper $0, $root_exec;

GetOptions(
  \%opts,
  # This option is actually mandatory however using a '=' doesn't work with 'pass_through' enabled because by specifying
  # an '=' we tell GetOpt that an argument is mandatory but if one is not specified then it just fails to recognize it
  # due to the pass_through and passes it along in @ARGV.
  # Thus, we need to use a ':' so that GetOpt picks up that '--config' was specified and then explicitly check the rest
  'config:s'  => sub { if ($_[1] eq "") {
                         print "The --config option requires a string argument\n", 'More info with: "vim -h"', "\n";
                         exit 1;
                       }
                       $opts{'config'} = $_[1];
                     },
  'help|h|?'  => sub { pod2usage(-verbose => 1, -exitval => "NOEXIT");
                       print "\nThe default vim help is as follows\n\n\n";
                       exec "$root_exec -h";
                     }
) or pod2usage(-verbose => 1);

# If vim is invoked in the middle of a pipe, default config to NONE if not specified by the user
# if (  !(-t STDIN)
#    && ($opts{'config'} eq "")
#    ) {
#   $opts{'config'} = "NONE" ;
# }


my @args=($root_exec);

# Check to see if the user has specified -u and/or -U. If not, try to set them sensibly based on --config's argument
my $u_set = grep(/^-u$/, @ARGV);
my $U_set = grep(/^-U$/, @ARGV);

if ($opts{'config'} eq "NONE") {
  # -u NONE prevents loading of system plugins too. Thus, we use NORC instead
  push @args, qw(-N --cmd), 'set rtp=$VIM,$VIMRUNTIME,$VIM/after';
  push @args, qw(-u NORC) if !$u_set;
  push @args, qw(-U NORC) if !$U_set;
  push @args, qw(--noplugins) if !grep(/^--noplugins$/, @ARGV);
} elsif ($opts{'config'} ne "") {
  push @args, qw(-N --cmd), sprintf("set rtp=%s,\$VIM,\$VIMRUNTIME,\$VIM/after,%s/after", $opts{'config'}, $opts{'config'});
  push @args, '-u', "$opts{'config'}/vimrc"  if (!$u_set && (-f "$opts{'config'}/vimrc"));
  push @args, '-U', "$opts{'config'}/gvimrc" if (!$U_set && (-f "$opts{'config'}/gvimrc"));
}

# Push the remaining arguments to be passed to vim
push @args, @ARGV;
# print Dumper \@args;


# print "STDOUT connected to " . (-t STDOUT ? "terminal" : "pipe") . "\n";
# print "STDIN connected to "  . (-t STDIN  ? "terminal" : "pipe") . "\n";

if (-t STDIN) {
  # STDIN is connected to the tty <==> vim is not present in the middle of a pipe
  # Execute vim and return
  exec(@args);
}


# If we've reached here then it means that vim is present in the middle of a pipe
my $stdout_tty = (-t STDOUT);

# Add -f option to avoid creating a fork if using gvim
if ($root_exec =~ /gvim/) {
  push @args, '-f';
}

$/=undef;

## Create a temp file and dump the stdin to it
my ($fh, $tmp_file)=tempfile();
die "Unable to create tempfile" unless $fh;

print ($fh <STDIN>) || die "Unable to write stdin to a temp file: $!";
close $fh;
close STDIN;

## Reconnect stdin and stdout to the terminal
# http://superuser.com/a/336020/99982
# Vim expects its stdin to be the same as its controlling terminal, and performs various terminal-related ioctl's on
# stdin directly. When done on any non-tty file descriptor, those ioctls are meaningless and return ENOTTY, which gets
# silently ignored. On startup Vim reads and remembers the old terminal settings, and restores them back when exiting.
# Thus, when the "old settings" are requested for a non-tty file descriptor, Vim receives all values empty and all
# options disabled, and carelessly sets the same to the terminal.
# This can be seen by running vim < /dev/null, exiting it, then running stty, which will output a whole lot of <undef>s.
# This could be considered as a bug in vim, since it can open /dev/tty for terminal control, but doesn't.
# Thus, to make vim interactive again, we need to explicitly close STDIN and STDOUt and connect them to the terminal
open(STDIN, "<", "/dev/tty") || die "Unable to reopen stdin: $!";
open(OUT, ">&", "STDOUT") || die "save stdout: $!";
close STDOUT;
open(STDOUT, ">", "/dev/tty") || die "Unable to reopen stdout: $!";

# +------------+------+------+---------+--------------------------------------------------------------------+
# | Location   | Mode | Open | Dump to | Description                                                        |
# | in Pipe    |      | Vim? | STDOUT? |                                                                    |
# +------------+------+------+---------+--------------------------------------------------------------------+
# | End/Middle | !RO  | Y    | Y       | Vim is being used in vipe mode                                     |
# | End        |  RO  | Y    | N       | Vim is probably being used a pager                                 |
# | Middle     |  RO  | N    | Y       | Weird case; behave like less does in this situation, i.e. like cat |
# +------------+------+------+---------+--------------------------------------------------------------------+

## Open $tmp_file in vim
if (  !(  scalar(grep(/^-R$/, @args))
       || ($root_exec =~ /view$/)
       )
   || $stdout_tty
   ) {
  my $ret=system(@args, '-c "runtime! macros/less.vim"', $tmp_file);
  if ($ret != 0) {
    die "$args[0] exited with a non-zero code; aborting\n";
  }
}

## Dump $tmp_file to STDOUT
if (  !(  scalar(grep(/^-R$/, @args))
       || ($root_exec =~ /view$/)
       )
   || !$stdout_tty
   ) {
  open($fh, "<", $tmp_file) || die "Unable to read $tmp_file: $!\n";
  print (OUT <$fh>) || die "Write failure: $!";
}

## Clean-up
close $fh;
unlink($tmp_file);
