#!/tool/pandora64/bin/perl -l

#=======================================================================================================================
# Documentation                                                                                                     {{{1
#
=head1 NAME

 paddr

=head1 AUTHOR

 Kartik Shenoy

=head1 SYNOPSIS

 paddr [OPTIONS] {address}

=head1 DESCRIPTION

 Dump all the tag, index, slice etc. information given a 64bit input address

=head1 OPTIONS

  -v, --verbose       Verbose mode. Print values of all arguments

=cut
# }}}1


## Modules
use Getopt::Long;
use Pod::Usage;

Getopt::Long::Configure("bundling");
#Getopt::Long::Configure("pass_through");


## Pragmas
use strict;
#use warnings;
#use diagnostics;
use Data::Dumper;


#=======================================================================================================================
# Command-line parameter handling                                                                                   {{{1
#
my %opts = (
  'verbose' => 0,
);

GetOptions(
  'help|h|?'   => sub { pod2usage( -verbose => 1, -exitval => 0 ); },
  'test|t',
  'verbose|v!',
) or pod2usage( -verbose => 1 ) && exit;

# Dump the input arguments
print Dumper \%opts if ($opts{verbose});


#=======================================================================================================================
# Main Code                                                                                                         {{{1
#
our $addr = hex($ARGV[0]);
our $hashedAddr = GetAddrBits(51,16,16) | ((GetAddrBits(27,21) ^ GetAddrBits(15,9)) << 9) | GetAddrBits(8,0);
our $size = 32;
our $mode = "Full";

sub GetBits {
  my $num    = $_[0];
  my $msb    = $_[1];
  my $lsb    = (defined($_[2]) ? $_[2] : $_[1]);
  my $offset = (defined($_[3]) ? $_[3] : 0);

  my $mask = (1 << ($msb - $lsb + 1)) - 1;
  return (($num >> $lsb) & $mask) << $offset;
}

sub GetAddrBits {
  my $msb    = $_[0];
  my $lsb    = (defined($_[1]) ? $_[1] : $_[0]);
  my $offset = (defined($_[2]) ? $_[2] : 0);

  return GetBits($addr, $msb, $lsb, $offset);
}

sub GetHAddrBits {
  my $msb    = $_[0];
  my $lsb    = (defined($_[1]) ? $_[1] : $_[0]);
  my $offset = (defined($_[2]) ? $_[2] : 0);

  return GetBits($hashedAddr, $msb, $lsb, $offset);
}

sub GetInterface {
  my $in = $_[0];
  my $interface  = (GetBits($in, 9) == 0 ? 8      : 16) . "MB-";
  $interface    .= (GetBits($in,20) == 0 ? "Even" : "Odd");

  return $interface;
}

my $hashedIf   = GetInterface((GetAddrBits(21) ^ GetAddrBits(9)) << 1 | GetAddrBits(20));

my @str;
# push(@str, sprintf " | Tag             | [   51:16] 0x%9x |", GetAddrBits(51,16));
# push(@str, sprintf " | Hash bits       | [   27:21] 0x%9x |", GetAddrBits(27,21));
# push(@str, sprintf " | L3Index         | [20,18: 6] 0x%9x |", (GetAddrBits(20,20,19) | GetAddrBits(18,6,6)) >> 6);
# push(@str, sprintf " | L3SIndex        | [20,18: 9] 0x%9x |", (GetAddrBits(20,20,19) | GetAddrBits(18,9,9)) >> 9);
# push(@str, sprintf " | L3Slice         | [    8: 6]   %9s |", GetAddrBits(8, 6));
# push(@str, sprintf " | Even/Odd  Sel   | [      20]   %9s |", GetAddrBits(20,20));
# push(@str, sprintf " | Sub-cache Sel*1 | [       9]   %9s |", GetAddrBits(9, 9));
# push(@str, sprintf " | Interface       |                        |");
# push(@str, sprintf " | L3MTagBank      |              %9s |", "*2");
# push(@str, sprintf " | L3MTagIndex     | [   18:12] 0x%9x |", GetAddrBits(18,12));
# push(@str, sprintf " | L3MDataBank     |              %9s |", "*3");
# push(@str, sprintf " | L3MDataIndex    | [   18:11] 0x%9x |", GetAddrBits(18,11));
# push(@str, sprintf " | L2Index         | [   15: 6] 0x%9x |", GetAddrBits(15, 6));

my $width = 9;
push(@str, sprintf " | %-2sM L3 (Full)        | Unhashed    | Hashed      |", $size);
my $sep = $str[0]; s/[|]/+/g, s/(?<!^)[^+]/-/g, for $sep;
splice(@str, 0, 0, $sep);
push(@str, $sep);
push(@str, sprintf " | Tag          [51:16] | 0x%${width}x | 0x%${width}x |", GetAddrBits(51,16),  GetHAddrBits(51,16));
push(@str, sprintf " | Hash bits    [27:21] | 0x%${width}x | 0x%${width}x |", GetAddrBits(27,21),  GetHAddrBits(27,21));
push(@str, sprintf " | L3Index      [20: 6] | 0x%${width}x | 0x%${width}x |", GetAddrBits(20, 6),  GetHAddrBits(20, 6));
push(@str, sprintf " | L3SIndex     [20: 9] | 0x%${width}x | 0x%${width}x |", GetAddrBits(20, 9),  GetHAddrBits(20, 9));
push(@str, sprintf " | L3Slice      [ 8: 6] |   %${width}s |   %${width}s |", GetAddrBits( 8, 6),  GetHAddrBits( 8, 6));
push(@str, sprintf " | Even/Odd     [   20] |   %${width}s |   %${width}s |", GetAddrBits(20,20),  GetHAddrBits(20,20));
push(@str, sprintf " | Sub-cache *1 [    9] |   %${width}s |   %${width}s |", GetAddrBits( 9, 9),  GetHAddrBits( 9, 9));
push(@str, sprintf " | Interface            |   %${width}s |   %${width}s |", GetInterface($addr), GetInterface($hashedAddr));
push(@str, sprintf " | L3MTagBank   [12:10] |   %${width}s |   %${width}s |", GetAddrBits(12,10),  GetHAddrBits(12,10));
push(@str, sprintf " | L3MTagIndex  [19:13] | 0x%${width}x | 0x%${width}x |", GetAddrBits(19,13),  GetHAddrBits(19,13));
push(@str, sprintf " | L3MDataBank  [11:10] |   %${width}s |   %${width}s |", GetAddrBits(11,10),  GetHAddrBits(11,10));
push(@str, sprintf " | L3MDataIndex [19:12] | 0x%${width}x | 0x%${width}x |", GetAddrBits(19,12),  GetHAddrBits(19,12));
push(@str, sprintf " | L2Index      [15: 6] | 0x%${width}x | 0x%${width}x |", GetAddrBits(15, 6),  GetHAddrBits(15, 6));
push(@str, $sep);
push(@str, "");
push(@str, $sep);
push(@str, sprintf " | %-2sM L3 (Half)        | Unhashed    | Hashed      |", $size);
push(@str, $sep);
push(@str, sprintf " | Tag          [51:16] | 0x%${width}x | 0x%${width}x |", GetAddrBits(51,16),  GetHAddrBits(51,16));
push(@str, sprintf " | Hash bits    [27:21] | 0x%${width}x | 0x%${width}x |", GetAddrBits(27,21),  GetHAddrBits(27,21));
push(@str, sprintf " | L3Index   [20,18: 6] | 0x%${width}x | 0x%${width}x |", (GetAddrBits(20,20,19) | GetAddrBits(18,6,6)) >> 6, (GetHAddrBits(20,20,19) | GetHAddrBits(18,6,6)) >> 6);
push(@str, sprintf " | L3SIndex  [20,18: 9] | 0x%${width}x | 0x%${width}x |", (GetAddrBits(20,20,19) | GetAddrBits(18,9,9)) >> 9, (GetHAddrBits(20,20,19) | GetHAddrBits(18,9,9)) >> 9);
push(@str, sprintf " | L3Slice      [ 8: 6] |   %${width}s |   %${width}s |", GetAddrBits( 8, 6),  GetHAddrBits( 8, 6));
push(@str, sprintf " | Even/Odd     [   20] |   %${width}s |   %${width}s |", GetAddrBits(20,20),  GetHAddrBits(20,20));
push(@str, sprintf " | Sub-cache *1 [    9] |   %${width}s |   %${width}s |", GetAddrBits( 9, 9),  GetHAddrBits( 9, 9));
push(@str, sprintf " | Interface            |   %${width}s |   %${width}s |", GetInterface($addr), GetInterface($hashedAddr));
push(@str, sprintf " | L3MTagBank   [12:10] |   %${width}s |   %${width}s |", "*2",                "*2");
push(@str, sprintf " | L3MTagIndex  [18:12] | 0x%${width}x | 0x%${width}x |", GetAddrBits(18,12),  GetHAddrBits(18,12));
push(@str, sprintf " | L3MDataBank  [11:10] |   %${width}s |   %${width}s |", "*3",                "*3");
push(@str, sprintf " | L3MDataIndex [18:11] | 0x%${width}x | 0x%${width}x |", GetAddrBits(18,11),  GetHAddrBits(18,11));
push(@str, sprintf " | L2Index      [15: 6] | 0x%${width}x | 0x%${width}x |", GetAddrBits(15, 6),  GetHAddrBits(15, 6));
push(@str, $sep);

push(@str,       "\n *1 : Also known as 8M/16M Select. 0: 16MB, 1: 8MB");
push(@str,         " *2 : The TagBank  is a two-bit field and is a function of Addr[12:10] and the BankDis bits");
push(@str,         " *3 : The DataBank is a one-bit field and is a function of Addr[11:10] and the BankDis bits");

map {
  s/0x(\s+)/${1}0x/g;
  print;
} @str;


#=======================================================================================================================
# Clean-up
#
#close $fin;
#close $fout;

exit 0;
