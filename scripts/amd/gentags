#!/usr/bin/env bash
#
# TODO:
# * Accept one or more files and update tags only for those files.
#   ctags doesn't support true update so the next best thing is to delete all lines matching the file and then 
#   use ctags -a to append to the tags file
#
# NOTE: true and false are not bools but simple executables in /bin which return true and false respectively

## Default variables                                                                                                {{{1
_workarea=""
_out_dir=""
_filelist=/tmp/tagfiles

## Helper functions                                                                                                 {{{1
_print_help_() {                                                                                                  # {{{2
  echo "Automatically generate tags and cscope database for all C/C++ related files located in the workarea and the latest build"
  echo
  echo "Usage:"
  echo "  `basename $0` [OPTIONS] [files...]"
  echo
  echo "Options:"
  echo "  -h                     Print this help"
  echo "  -d                     Generate tags for files in the specified directory. Can be specified multiple times"
  echo "  -l                     Generate tags for files listed in the specified filelist. Can be specified multiple times"
  echo "  -o                     Generate tags/cscope db to the specified directory."
  echo "                         Defaults to \$REPO_PATH or, if -w was given, the specified work-area"
  echo "  -w                     Use the specified dir as work-area. If this is not specified, defaults to \$REPO_PATH"
}
# }}}2


## Parse Arguments                                                                                                  {{{1
for _i in "$@"; do
  if [[ $_i =~ ^-h$ ]] || [[ $_i =~ ^--help$ ]]; then
    _print_help_
    exit 0
  fi
done

# Clean up temp files
> $_filelist


while (( $# > 0 )); do
  case $1 in
    -d) shift;
      if [[ -d "$1" ]]; then
        find "$1" -type f -type f \( -iname "*.h" -o -iname '*.hh' -o -iname '*.hpp' -o -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" \) >| $_filelist
      fi
      ;;

    -l) shift;
      [[ -f "$1" ]] && command grep '\.\(h\|hh|hpp|c|cc|cpp\)$' "$1" >> $_filelist
      ;;

    -o) shift;
      _out_dir="$1"
      ;;

    -w) shift;
      [[ -d "$1" ]] && _workarea="$1"
      ;;

    -*)
      echo -e "ERROR: Invalid option: '$1'"
      _print_help_
      exit 1;
      ;;

    *)
      echo "$1" >> $_filelist
      ;;
  esac
  shift
done

if [[ -z "$_workarea" ]]; then
  if [[ -z "$REPO_PATH" ]]; then
    echo "Work area is not specified. REPO_PATH is also not set!"
    exit 1
  fi
  _workarea="$REPO_PATH"
fi

if [[ "$_workarea" != "$REPO_PATH" ]]; then
  #echo "Booting into workarea '$_workarea'"
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && command loadenv
fi

if [[ -z "$_out_dir" ]]; then
  _out_dir="$_workarea"
fi

# If file is empty, then try to make a best-case guess of what might be useful
if [[ ! -s $_filelist ]]; then
  command grep '\.\(h\|hh\|hpp\|c\|cc\|cpp\)$' --no-filename \
    <(cd $STEM; p4 have ... 2> /dev/null | awk {'print $3'}) \
    <(cd $STEM; p4 opened ... 2> /dev/null | \
      command grep add | command sed "s/#.*//" | command xargs -I{} -n1 p4 where {} | awk '{print $3}') \
    <(cd $ANCHOR_avf; p4 have ... 2> /dev/null | awk '{print $3}') \
    <(find $STEM/build/latest/generated -type f 2> /dev/null) >| $_filelist
fi

# If file is still empty, then something's wrong. We have nothing left to do here
[[ ! -s $_filelist ]] && exit 1


command sort -u $_filelist > /tmp/$$; command mv /tmp/$$ $_filelist


## Generate tags                                                                                                    {{{1
# ---------+------------------------------------------------------------------------------------------------------------
#   fields | Shows the following information about the tag entry. + includes it and - excludes it                 # {{{2
# ---------+------------------------------------------------------------------------------------------------------------
#        a | Access (or export) of class members
#        f | File-restricted scoping [enabled]
#        i | Inheritance information
#        k | Kind of tag as a single letter [enabled]
#        K | Kind of tag as full name
#        l | Language of source file containing tag
#        m | Implementation information
#        n | Line number of tag definition
#        s | Scope of tag definition [enabled]
#        S | Signature of routine (e.g. prototype or parameter list)
#        t | Type and name of a variable or typedef as "typeref:" field [enabled]
#        z | Include the "kind:" key in kind field
# ---------+------------------------------------------------------------------------------------------------------------
#
# ---------+------------------------------------------------------------------------------------------------------------
#    kinds | kinds of tags (particular to the language) to either include or exclude from the output              # {{{2
# ---------+------------------------------------------------------------------------------------------------------------
#        c | classes
#        d | macro definitions
#        e | enumerators (values inside an enumeration)
#        f | function definitions
#        g | enumeration names
#        l | local variables [off]
#        m | class, struct, and union members
#        n | namespaces
#        p | function prototypes [off]
#        s | structure names
#        t | typedefs
#        u | union names
#        v | variable definitions
#        x | external and forward variable declarations [off]
# ---------+------------------------------------------------------------------------------------------------------------
# }}}2

(
# :CtrlPTags gets really slow with a large tag file containing lots of info so I'm restricting to what's strictly necessary
# NOTE: Most options in --fields and --c++-kinds are enabled/disabled by default and have not been specified.
#       This is the full list of options: --fields=+aS-fiKklmnstzrRZEx --c++-kinds=+cdefgmstv-lnpuxzLN
ctags --languages=c,c++ --fields=+a-fkst --c++-kinds=-nu -L $_filelist -f ${_out_dir}/.tags 2> /dev/null

# Clean-up the tags file by deleting fold markers etc.
if [[ -f ${_out_dir}/.tags ]]; then
  sed -i 's:\s*\\/\\/\s*{{{[0-9]*\$::' ${_out_dir}/.tags
fi
) &

## Generate cscope database                                                                                         {{{1
cscope -bqk -i $_filelist -f ${_out_dir}/.cscope.out 2> /dev/null &
# }}}1

wait
#command rm -f $_filelist
#command vim --serverlist | command grep -i $REPO_PATH | command xargs -n1 -I{} vim --servername {} --remote-send ':echo "Updated tags"<CR>'
