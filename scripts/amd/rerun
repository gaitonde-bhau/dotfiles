#!/usr/bin/perl

##======================================================================================================================
## Documentation                                                                                                    {{{1
##======================================================================================================================
=head1 NAME

 rerun

=head1 AUTHOR

 Kartik Shenoy

=head1 SYNOPSIS

 rerun [OPTIONS] [RECOMPILE_FILES]

=head1 DESCRIPTION

 Reruns the previous simulation according to the run_job command present
 in tb_sim or sim.out or summary.rj file if no arguments are specified

=head1 OPTIONS

 -a, --add=STRING         Add STRING to the run_job command. Can be specified multiple times
                          Overrides --delete
     --agg-dump[=FILE]    Dump aggregator logs to FILE (enabled by default)
     --noagg-dump         Don't dump aggregator logs to FILE
 -b, --build              Build model before running
     --buildlocal[=PATH]  Build model locally in the PATH/Use the local build for the run_job command
                          NOTE: The build command creates a subdirectory with the name of the model within PATH
     --nobuildlocal       Don't build the model locally (default)
 -c, --clean              Clean model and rebuild before running
                          Implies --build unless --norun is specified
 -C, --clean-all          Clean all models and rebuild before running
                          Implies --build unless --norun is specified
     --cmd=CMD            Provide the cmd directly to clean up and run.
                          Overrides --file
     --cov                Sane defaults to run coverage. Appends _cov to model if required and
                          adds "-p cov -model_cov -vcs_opts '-cg_coverage_control=1'" to the run_job command
 -d, --delete             Delete any options from the run_job command. Can be specified multiple times
 -f, --file=FILE          Pick up the run_job command from FILE
                          Defaults to tb_sim and failing that, to sim.out and summary.rj
                          When a jobspec file is specified, --noyaml is set by default
     --fsdb               Dump waves
     --nofsdb             Do not dump waves. Defaults to this unless a value is forced
     --lsf                Submit the job to LSF (default)
     --nolsf              Run the job locally
 -m, --model=MODEL        Use MODEL instead of the one obtained from the run_job command
     --remote             Launch the run_job command remotely
     --noremote           Launch the run_job command locally
     --recompile          Run recompile first before building the model. One or more files can be specified.
                          If not given any, it'll recompile all files edited after the last build.
 -r, --run                Execute the run_job (default)
 -R, --norun              Do not execute the run_job
     --runlocal           Run simulation locally. Implies --noremote and --nolsf
     --seed=NUM           Use NUM as seed
     --noseed             Remove the seed.
     --spin               Wait till the model is built successfully before launching the run (Uses ~kshenoy/bin/spin)
 -t, --test               Test run. Just print the command to execute but don't run it
     --verbose            Verbose mode. Print values of all arguments
 -v, --vericom            Build vericom target (default)
     --novericom          Suppress -vericom build target
 -w, --wtf                Run WhyTheFail upon build failure (default)
     --nowtf              Do not run WhyTheFail if build fails
 -y, --yaml               Enable logging via amdmsg_config.yaml (default).
                          The yaml file to be used can be specified as an optional argument.
                          Defaults to ~/amdmsg_config.yaml if one is not provided.
     --noyaml             Disable logging (Delete amdmsg_config.yaml file)

=cut
# }}}1

use strict;
use diagnostics;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use Cwd 'abs_path';
use File::Basename;
use Data::Dumper;
#use Term::ANSIColor qw(:constants);


Getopt::Long::Configure("bundling");
#Getopt::Long::Configure("pass_through");
$Data::Dumper::Sortkeys = 1;



##======================================================================================================================
## Option Handling                                                                                                  {{{1
##======================================================================================================================
## Default values for options _____________________________________________________________________________________ {{{2
my %opts = (
  'add'              =>  "",
  'agg_dump_f'       =>  0,
  'agg_dump'         =>  1,
  'agg_dump_file'    =>  "",
  'build'            =>  0,
  'builddir'         =>  "",
  'buildlocal'       =>  0,
  'clean'            =>  0,
  'clean_all'        =>  0,
  'cmd'              =>  "",
  'cov'              =>  0,
  'delete'           =>  "",
  'file'             =>  "tb_sim",
  'fsdb'             =>  -1,
  'jobname'          =>  "",
  'lsf'              =>  1,
  'model'            =>  "",
  'recompile'        =>  0,
  'recompile_files'  =>  [],
  'remote'           =>  0,
  'run'              =>  1,
  'seed'             =>  213471118,
  'seed_f'           =>  0,
  'spin'             =>  0,
  'tags'             =>  1,
  'test'             =>  0,
  'verbose'          =>  0,
  'vericom'          =>  1,
  'wtf'              =>  1,
  'yaml'             =>  0,
  'yaml_file'        =>  "~/amdmsg_config.yaml",
);
$opts{'file'} = "sim.out"    unless ( -e $opts{'file'} );
$opts{'file'} = "summary.rj" unless ( -e $opts{'file'} );

GetOptions(                                                                                                       # {{{2
  \%opts,
  'add|a=s',
  'agg-dump:s'        => sub { $opts{'agg_dump_f'} = 1;
                               $opts{'agg_dump'} = 1;
                               $opts{'agg_dump_file'} = $_[1] if ($_[1] ne "");
                             },
  'noagg-dump'        => sub { $opts{'agg_dump_f'} = 1;
                               $opts{'agg_dump'} = 0;
                             },
  'build|b!',
  'buildlocal:s'      => sub { $opts{'buildlocal'} = 1;
                               $opts{'builddir'} = $_[1] if ($_[1] ne "");
                             },
  'nobuildlocal'      => sub { $opts{'buildlocal'} = -1; },
  'clean|c',
  'clean-all|C'       => sub { $opts{'clean_all'} = 1;
                               $opts{'clean'} = 0;
                             },
  'cmd=s',
  'cov!',
  'delete|d=s',
  'file|f=s'          => sub { $opts{$_[0]} = abs_path( $_[1] ); },
  'fsdb!',
  'help|h|?'          => sub { pod2usage( -verbose => 1, -exitval => 0 ); },
  'lsf!'              => sub { $opts{$_[0]} = $_[1];
                               $opts{'remote'} = 0 if $_[1];
                             },
  'model|m=s',
  'recompile!',
  'remote!'           => sub { $opts{$_[0]} = $_[1];
                               $opts{'lsf'} = 0 if $_[1];
                             },
  'run|r!',
  'runlocal',         => sub { $opts{'remote'} = 0;
                               $opts{'lsf'}    = 0;
                             },
  'seed=o'            => sub { $opts{'seed_f'} = 1;
                               $opts{'seed'}   = $_[1];
                             },
  'spin!',
  'noseed'            => sub { $opts{'seed_f'} = -1; },
  'tags!',
  'test|t!',
  'verbose!',
  'vericom|v!',
  'wtf|w!',
  'yaml|y:s'          => sub { $opts{'yaml'} = 1;
                               $opts{'yaml_file'} = $_[1] if ($_[1] ne "");
                             },
  'noyaml'            => sub { $opts{'yaml'} = -1 }
) or pod2usage(-verbose => 1);

if ($opts{'recompile'}) {
  @{$opts{'recompile_files'}} = @ARGV;
} else {
  print "INFO: Ignoring extra arguments '@ARGV'\n" if ($#ARGV >= 0);
}

## Force options
## |------+-----------+-------------------------------------------------------------------------------------|
## | yaml | yaml_file | Description                                                                         |
## |------+-----------+-------------------------------------------------------------------------------------|
## |    1 | == ""     | The user has specified --yaml but not provided a file.                              |
## |      |           | Copy the default amdmsg_config.yaml file; any yaml file present will be overwritten |
## |    1 | != ""     | The user forced the --yaml option. Copy the amdmsg_config.yaml file specified       |
## |    0 | -         | The user used neither option -> use all defaults                                    |
## |   -1 | -         | The user forced the --noyaml option. Delete the amdmsg_config.yaml file             |
## |------+-----------+-------------------------------------------------------------------------------------|

## |--------+-------------------------------------------------------------------------------------|
## | seed_f | Description                                                                         |
## |--------+-------------------------------------------------------------------------------------|
## |      1 | --seed was specified and a value was given                                          |
## |      0 | --seed was not specified. Grab from run_job, and if not present there, from sim.out |
## |     -1 | --noseed was specified, remove --seed from the command-line                         |
## |--------+-------------------------------------------------------------------------------------|

## |------------+------------------------------------------------------------------------------------------------------|
## | buildlocal | Description                                                                                          |
## |------------+------------------------------------------------------------------------------------------------------|
## |         -1 | User used the --nobuildlocal option. Do not build locally.                                           |
## |          0 | Neither --buildlocal nor --nobuildlocal was used. Follow previous run_job command                    |
## |          1 | User used --buildlocal option without any argument. Check the run_job command for -buildlocal switch.|
## |            | If it hasn't been specified, default to $PWD/buildlocal                                              |
## |          1 | User used --buildlocal option with an argument. Use that to build locally                            |
## |------------+------------------------------------------------------------------------------------------------------|
# }}}1

## Check if bootenv has been done
die 'ERROR: $STEM is not set\n' unless defined($ENV{'STEM'});

print  "[ TEST RUN ]\n" if $opts{'test'};

## Processing arguments
$opts{'build'} ||= &get_build;
if ($opts{'build'}) {
  $opts{'spin'} = 0;
}

## Dump the input arguments
print Dumper(\%opts) if $opts{'verbose'};

## Algo:-
## 1. Identify source i.e. jobspec file, command-line --cmd or run_job file and set the CMD string
## 2. Identify the model
## 3. Enable/disable logging via amdmsg_config.yaml
## 4. Build the model
## 5. Sanitize and construct the final CMD string

## Identify the Source _________________________________________________________________________________________________
## --cmd > ljd file | run_job file
if ( $opts{'cmd'} eq "" ) {
  if ( `grep -s jobspec $opts{'file'}` ) {
    $opts{'ljd'} = 1;
    $opts{'agg_dump_f'} = 1;
    $opts{'agg_dump'} = 0;
    ## Delete any amdmsg_config.yaml files when running a jobspec
    $opts{'yaml'} = -1;
    ## Force build without --vericom option
    $opts{'vericom'} = 0;
  }
}

if ($opts{'ljd'}) {
  $opts{'remote'} = 0;
  $opts{'lsf'} = 0;
}

## Get the command _____________________________________________________________________________________________________
if (  (  (  $opts{'build'}
         || $opts{'clean'}
         )
      && ( $opts{'model'} eq "" )
      && ( $opts{'cmd'}   eq "" )
      )
   || (  $opts{'run'}
      && ( $opts{'cmd'} eq "" )
      )
   ) {
  if ( $opts{'ljd'} ) {
    print "\nProvided file: $opts{'file'} is a jobspec file...\n" if $opts{'verbose'};
    $opts{'cmd'} = "ljd -nomail -l $opts{'file'}";
  } else {
    print "\nCommand not specified. Obtaining it from $opts{'file'} ...\n" if $opts{'verbose'};
    ( -e $opts{'file'} ) or pod2usage({ -verbose => 1, -message => "ERROR: File not found: $opts{'file'}\n"});
    ## Stop searching after 1st match
    $opts{'cmd'} = `grep -s -m 1 run_job $opts{'file'}`;
    ( $opts{'cmd'} eq "" ) and pod2usage({ -verbose => 1, -message => "ERROR: Unable to locate the run_job command in $opts{'file'}\n" });
  }
}
chomp( $opts{'cmd'} );


## Identify the model __________________________________________________________________________________________________
if ( $opts{'ljd'} ) {
  ( my $ljd_model ) = `grep -s -m 1 '<model>' $opts{'file'}` =~ /<model>([^<]+)<\/model>/;
  if ( $opts{'model'} eq "" ) {
    print "Model not specified. Obtaining it from the jobspec file...\n" if $opts{'verbose'};
    $opts{'model'}  = $ljd_model;
    $opts{'model'} .= "_cov" if ($opts{'cov'} && ($opts{'model'} !~ /_cov$/));
  }
  else {
    ## Model needs to be replaced. We have to reset the cmd
    $opts{'model'} .= "_cov" if ($opts{'cov'} && ($opts{'model'} !~ /_cov$/));
    my $file_old = $opts{'file'};
    $opts{'file'} = getcwd() . '/' . basename( $file_old, ".xml" ) . '_' . $opts{'model'} . '.xml';
    &run_cmd('\sed "s/' . $ljd_model . '/' . $opts{'model'} . '/" ' . $file_old . '>| ' . $opts{'file'}) unless $opts{'test'};
    $opts{'cmd'} = "ljd -nomail -l $opts{'file'}";
  }
} elsif ( $opts{'model'} =~ /unittest/ ) {
  $opts{'vericom'} = 0;
} elsif ( $opts{'model'} eq "" ) {
  print "\nModel not specified. Obtaining it from the run_job command...\n" if $opts{'verbose'};
  ( $opts{'model'} ) = $opts{'cmd'} =~ /-model\s*(\w+)/;
  $opts{'model'} .= "_cov" if ($opts{'cov'} && ($opts{'model'} !~ /_cov$/));
}
print "Model: '$opts{'model'}'\n\n" if $opts{'verbose'};
$opts{'cmd'} =~ s/(-model)\s*\w+/$1 $opts{'model'}/;
$opts{'builddir'} = "$ENV{'STEM'}/build" if ($opts{'buildlocal'} != 1);


## Include/Exclude the amdmsg_config.yaml file _________________________________________________________________________
if ($opts{'yaml'} >= 0) {
  ## Copy only if the yaml does not exist or --yaml is forced.
  if (   ($opts{'yaml'} > 0)
     || !(-f "amdmsg_config.yaml")
     ) {
    print  "Copying amdmsg_config.yaml ...\n";
    &run_cmd('\cp ' . $opts{'yaml_file'} . ' amdmsg_config.yaml') unless $opts{'test'};
  }
} elsif (-f "amdmsg_config.yaml") {
  print  "Deleting amdmsg_config.yaml ...\n";
  system('\rm amdmsg_config.yaml 2> /dev/null') unless $opts{'test'};
}

## Build locally? ______________________________________________________________________________________________________
if (  (  ($opts{'buildlocal'} == 1)
      && ($opts{'builddir'} eq "")
      )
   || ($opts{'buildlocal'} == 0)
   ) {
  ## Check if run_job has the -buildlocal option
  if ($opts{'cmd'} =~ /-buildlocal\s*(\S+)/) {
    $opts{'buildlocal'} = 1;
    $opts{'builddir'} = $1 if ($1 ne "");
  } elsif ($opts{'buildlocal'} == 1) {
    $opts{'builddir'} = getcwd() . "/buildloc";
  }
}


## Recompile ___________________________________________________________________________________________________________
if ($opts{'recompile'}) {
  print "[ RECOMPILE ]\n";

  if (-f "$opts{'builddir'}/$opts{'model'}/build.log") {
    if ($#{$opts{'recompile_files'}} >= 0) {
      # Files to be recompiled have been provided
      # Enclose map in [...] to return an array reference instead of a plain array
      $opts{'recompile_files'} = [ map(basename($_, ('.h', '.cc', '.cpp', '.c')), @{$opts{'recompile_files'}}) ];
    } else {
      my $build_mod_time = `stat -c '%Y' $ENV{'STEM'}/build/$opts{'model'}/build.log`; chomp $build_mod_time;
      if ($build_mod_time ne "") {
        my %recompile_files;
        foreach (`p4 opened | grep -P '\.(h|cc)#.*(add|edit)' | sed 's/#.*\$//' | command xargs p4 where`) {
          my @i = split(' ');
          my $file = $i[-1]; my $file_basename = basename($file, ('.h', '.cc'));
          if (-f dirname($file) . "/" . $file_basename . ".cc") {
            my $file_mod_time = `stat -c '%Y' $file`; chomp $file_mod_time;
            if ($file_mod_time eq "") {
              next;
            }
            if (  ($file_mod_time > $build_mod_time)
               && (  !exists($recompile_files{$file_basename})
                  || ($file_mod_time > $recompile_files{$file_basename})
                  )
               ) {
              $recompile_files{$file_basename} = $file_mod_time;
            }
          }
        }
        @{$opts{'recompile_files'}} = (sort { $recompile_files{$b} <=> $recompile_files{$a} } keys %recompile_files);
      }
    }
    # print Dumper(\@{$opts{'recompile_files'}});

    foreach (@{$opts{'recompile_files'}}) {
      my $cmd_recompile = "recompile -model $opts{'model'} $_";
      print "    $cmd_recompile\n";
      $cmd_recompile .= " 2>&1 >| recompile.log";

      unless ($opts{'test'}) {
        system "\\rm recompile.log $opts{'builddir'}/build.log 2> /dev/null";
        my $exit_code = system qq($cmd_recompile);
        $exit_code >>= 8;
        # print "DEBUG: Recompile exited with code=$exit_code\n";

        ## Exit Code = 1 : recompile ran and found some error
        ##             2 : recompile couldn't run because it couldn't find the .cc.o.log file. FIXME: Skip and continue : /
        if (  ($exit_code == 1)
           && $opts{'wtf'}
           ) {
          exec '$PAGER recompile.log';
          exit($exit_code);
        } elsif ($exit_code > 2) {
          print "ERROR: Recompile failed with exit code $exit_code\n";
          exit($exit_code);
        }
        # else: Exit Code = 0 : No errors found
        #                   2 : File not found   ==> proceed in either case
      }
    }
  }
}


## Build/Clean _________________________________________________________________________________________________________
if ($opts{'clean'} || $opts{'clean_all'} || $opts{'build'}) {
  print "\n[ BUILD ]\n";
  system "\rm recompile.log build_$opts{'model'}.log 2> /dev/null";

  my $vericom_targ = ( $opts{'vericom'} ? " -vericom" : "" );
  my $cmd_build = "";
  if ($opts{'clean'}) {
    $cmd_build = "build -clean -model $opts{'model'}" . ($opts{'build'} ? " && " : "");
  } elsif ($opts{'clean_all'}) {
    $cmd_build = "build -clean_all" . ($opts{'build'} ? " && " : "");
  }
  $cmd_build .= "build -model $opts{'model'} -k $vericom_targ" if $opts{'build'};
  $cmd_build .= " -buildloc $opts{'builddir'}" if ($opts{'buildlocal'} == 1);

  ## Beautify :P
  $cmd_build =~ s/^\s*|\s*$//g;
  $cmd_build =~ s/\s+/ /g;

  print "    $cmd_build\n";
  print "\n" if ($opts{'clean'} || $opts{'clean_all'});
  unless ($opts{'test'}) {
    $cmd_build .= " >| build_$opts{'model'}.log" if $opts{'build'};

    unlink "$ENV{'STEM'}/build/latest";
    symlink("$ENV{'STEM'}/build/$opts{'model'}", "$ENV{'STEM'}/build/latest") || warn("WARN: Unable to create symlink to latest build\n");

    my $exit_code = system qq($cmd_build);

    if ($opts{'build'}) {
      if ($exit_code) {
        if ($opts{'wtf'}) {
          print "\n";
          if ($opts{'buildlocal'}) {
            system "WhyTheFail -m $opts{'model'} --buildloc $opts{'builddir'}";
          } else {
            system "WhyTheFail -m $opts{'model'}";
          }
        }
        exit($exit_code >> 8);
      } else {
        ## Generate tags and cscope.out if build succeeds
        system("tail -n3 build_$opts{'model'}.log");
        system("~kshenoy/bin/gentags --create $ENV{'STEM'}/build/$opts{'model'} &") if $opts{'tags'};
      }
    }
  }
} elsif ($opts{'spin'}) {
  ## Wait till model has been built successfully
  print "\n[ BUILD ]\n";
  print "    Waiting till the $opts{'model'} is built...\n";
  system("~kshenoy/bin/spin --model $opts{'model'}");
}



## Sanity check to see if the build exists
if (  (  $opts{'build'}
      || $opts{'spin'}
      )
   && !(-f "$opts{'builddir'}/$opts{'model'}/BUILD_SUCCEEDED")
   && !$opts{'test'}
   ) {
  die "ERROR: Couldn't find a successful build for $opts{'model'} in $opts{'builddir'}\n";
}



## Run Job _____________________________________________________________________________________________________________
if ( $opts{'run'} ) {
  print "\n[ RUN JOB ]\n";
  ## Remove junk arguments
  $opts{'cmd'} =~ s/-vsz_limit\s*\d+\s*//;
  $opts{'cmd'} =~ s/-batch_name\s*\S+\s*//;
  $opts{'cmd'} =~ s/-rtp_datafile\s*\S+\s*//;
  $opts{'cmd'} =~ s/-p\s+crdb\s*//g;
  $opts{'cmd'} =~ s/-(?:no)?crdb\s*//g;
  $opts{'cmd'} =~ s/-o ""\s*//;
  $opts{'cmd'} =~ s/-(?:no)?delete//;
  $opts{'cmd'} =~ s/-gzip\s*//;
  $opts{'cmd'} =~ s/-test_id\s*\S+\s*//;
  $opts{'cmd'} =~ s/-p\s+disk_space\s*//;
  $opts{'cmd'} =~ s/-p\s+RegrPlatformPluginCRDB//g;
  $opts{'cmd'} =~ s/-rp_name\s+\w+//;
  $opts{'cmd'} =~ s/-cov_vdb_root\s+\S+//;

  if ($opts{'cmd'} =~ /-vcs_opts\s*\+DUMP/) {
    $opts{'cmd'} =~ s/$&//;
  }

  if ($opts{'cmd'} !~ /-p\s*avf/) {
    $opts{'cmd'} =~ s/-p\s+whack\s+-p\s*rndcfg/$& -p avf/;
  }

  ## Add coverage defaults
  if ($opts{'cov'}) {
    $opts{'cmd'} .= " -p cov"                             if ($opts{'cmd'} !~ /\s+-p\s+cov\b/);
    $opts{'cmd'} .= " -model_cov"                         if ($opts{'cmd'} !~ /\s+-model_cov\b/);
    $opts{'cmd'} .= " -vcs_opts '-cg_coverage_control=1'" if ($opts{'cmd'} !~ /-cg_coverage_control\s*\=\s*1\b/);
  }

  ## Add/Delete options to/from the CMD
  if ( $opts{'delete'} ne "" ){
    print "    Removing option: '$opts{'delete'}'\n";
    ## We use \Q and \E to escape any special characters such as in '+DUMP'
    $opts{'cmd'} =~ s/\Q$opts{'delete'}\E//;
  }
  if ($opts{'add'} ne ""){
    print "    Adding option: '$opts{'add'}'\n";
    $opts{'fsdb'} |= ( 0 | ( $opts{'add'} =~ s/-p\s*fsdb// ));
    $opts{'cmd'}  .= " " . $opts{'add'};
  }

  ## Append TMUX info to the jobname to make it easier to find where the jobs were issued from
  if (  defined($ENV{'TMUX'})
     && (length($ENV{'TMUX'}) > 0)
     ) {
    chomp($opts{'jobname'} = `tmux display-message -p "#S:#I.#P"`);
    $opts{'jobname'} .= "__";
  }

  ## Run the jobspec in its own directory
  if (  $opts{'ljd'}
     && ($opts{'cmd'} !~ /-d\s*/)
     ) {
    my $cid = `grep -Po "(?<=@)\\d+\$" \$STEM/configuration_id`;
    chomp($cid);
    my $ljd_dir = "ljd_${cid}";
    my $i=0;
    while (-e $ljd_dir) {
      $i++;
      $ljd_dir = "ljd_${cid}_$i";
    }
    $opts{'jobname'} .= "$ENV{'STEM'}__$opts{'model'}__${ljd_dir}";
    $opts{'cmd'} .= " -b $opts{'jobname'} -d ${ljd_dir}";
  } elsif ($opts{'ljd'}) {
    $opts{'jobname'} .= "$ENV{'STEM'}__$opts{'model'}";
    $opts{'cmd'} .= " -b $ENV{'STEM'}__$opts{'model'}";
  }


  ## Grab seed from sim.out if not present in the CMD
  if ( !$opts{'ljd'} ) {
    if ( $opts{'seed_f'} == -1 ) {
      ## NoSeed was forced. Remove seed
      $opts{'cmd'} =~ s/-seed\s+\w+//;
    }
    else {
      if ( $opts{'seed_f'} == 0 ) {
        # Seed was not specified. Try to use seed from sim.out
        # If unable to find, use $opts{'seed_default'}
        if ( $opts{'cmd'} =~ /-seed\s+(\w+)/ ) {
          $opts{'seed'} = $1;
        } else {
          ( my $file = $opts{'file'} ) =~ s|[^/]*/?$|sim.out|;
          if (  (-f $file)
             && (`command grep -Ps -m 1 '\\-seed\\s+0x[a-fA-F0-9]+' $file` =~ /-seed\s+(0x[a-fA-F0-9]+)/)
             ) {
            $opts{'seed'} = $1;
          }
        }
      }
      print "    Using seed $opts{'seed'}\n" if $opts{'verbose'};
      $opts{'cmd'} .= " -seed $opts{'seed'}" unless ($opts{'cmd'} =~ s/-seed\s+\w+/-seed $opts{'seed'}/);
    }
  }

  ## Include/Exclude logs
  if ($opts{'agg_dump_f'}) {
    $opts{'cmd'} =~ s/-?-agg_dump(\s+[^\s"]+|_on)//;
  }
  if (  ($opts{'cmd'} !~ /agg_dump/)
     && $opts{'agg_dump'}
     ) {
    if ($opts{'agg_dump_file'} ne "") {
      $opts{'cmd'} .= ' -avf "-agg_dump ' . $opts{'agg_dump_file'} . '"';
    } else {
      $opts{'cmd'} .= ' -avf --agg_dump_on';
    }
  }

  ## Include/Exclude waves
  if ( $opts{'fsdb'} == 0 ) {
    $opts{'cmd'} =~ s/-p fsdb//;
  } elsif ( $opts{'fsdb'} == 1 ) {
    $opts{'cmd'} =~ s/(-p\s+\S+\s+)+/$& -p fsdb / if ( $opts{'cmd'} !~ /-p\s+fsdb/ );
  }

  ## Disable compression of Test.log
  if ($opts{'cmd'} =~ /tb_l3/) {
    $opts{'cmd'} =~ s/-TestCompressedLog\s+0\s*//;
  } elsif (  !$opts{'ljd'}
          && ($opts{'cmd'} !~ /TestCompressedLog/)
          ) {
    $opts{'cmd'} .= ' -avf "-TestCompressedLog 0"';
  }

  ## Use local build if --buildloc is specified
  $opts{'cmd'} =~ s/-buildloc\s*\S+\s*//;
  if ($opts{'buildlocal'} == 1) {
    die 'ERROR: buildloc directory ($opts{"builddir"}) does not exist\n' unless (-d $opts{'builddir'} || $opts{'test'});
    $opts{'cmd'} .= " -buildloc $opts{'builddir'}";
  }

  ## Beautify :P
  $opts{'cmd'} =~ s/-avf\s*(["'])\s*\1//g;
  $opts{'cmd'} =~ s/^\s*|\s*$//g;
  $opts{'cmd'} =~ s/\s+/ /g;

  ## Run the job remotely
  $opts{'jobname'} .= getppid() . ": " . getcwd();

  if (!$opts{'lsf'}) {
    $opts{'cmd'} =~ s/\s*-lsf//;
    $opts{'cmd'} =~ s/\s*-submit_args\s+'[^']*'//;
  } else {
    if ($opts{'cmd'} !~ /-lsf/) {
      $opts{'cmd'} .= " -lsf"
    }
    if ($opts{'cmd'} !~ /-submit_args/) {
      $opts{'cmd'} .= " -submit_args '-J \"$opts{'jobname'}\"'";
    }
  }

  if ($opts{'remote'}) {

    $opts{'cmd'} = 'run_remote -J "' . $opts{'jobname'} . '" ' . $opts{'cmd'};
  }

  if ($opts{'remote'}) {
    print "    $opts{'jobcmd'}\n";
  } else {
    print "    $opts{'cmd'}\n";
  }
}

unless ( $opts{'test'} ) {
  print "\n";

  if ($opts{'run'}) {
    if ($ENV{'STEM'} =~ getcwd()) {
      print 'ERROR: sim is being run from top of workarea. Do you really want to continue and fail later? (y/n) ';
      chomp(my $ans = <STDIN>);
      die if lc($ans =~ '^n');
    }

    system '\rm FAILED PASSED sim.out summary.rj 2> /dev/null';
    exec qq($opts{'cmd'} && alert "Job Done: $opts{'jobname'}");
  }
}

##======================================================================================================================
## Subroutines                                                                                                      {{{1
##======================================================================================================================
sub get_build {
  return (  (  $opts{'clean'}
            || $opts{'clean_all'}
            )
         && $opts{'run'}
         );
}

sub run_cmd {
  #print $_[0]."\n";
  my $exit_code = system $_[0];
  if ($exit_code != 0) {
    ## Refer http://stackoverflow.com/a/7080502/734153 for the explanation
    exit($exit_code >> 8);
  }
  return 0
}

exit 0
