#!/bin/bash -e
#
# SYNTAX: mkwa_clone
#   P4 Work area - The work area to run the sim in
#   Changelist - The changelist to update to before running

# TODO: Convert 1/0 to true/false

function print_help() {
  echo "Usage:"
  echo "  $(basename $0) [OPTIONS]"
  echo
  echo "Options:"
  echo "  -h    Print this help"
  echo "  -s    Use the specified dir as the Source work-area"
  echo "  -t    Use the specified dir as the Target work-area instead of using \$REPO_PATH"
}

# Defaults
src=""
src_cl=0
targ=${REPO_PATH:-$PWD}
targ_create=0
targ_upd=0
targ_cl=0
summary=0
update=true
verbose=false

pipe="${TMPDIR:-/tmp}/mkwa_clone_$$"
if [[ -p ${pipe} ]]; then
  # Flush pipe if it exists
  dd if=${pipe} of=/dev/null iflag=nonblock
else
  mkfifo ${pipe}
fi

# Colors for echo!
fg_green=$(tput bold; tput setaf 2)
reset=$(tput sgr0)

echo
while getopts ":c:s:t:hv" opt; do
  case $opt in
    s)
      if [[ ! -d ${OPTARG} ]]; then
        echo "ERROR: Source ($OPTARG) work-area does not exist";
        exit 1;
      fi
      src=$(readlink -f ${OPTARG})
      if [[ ! -f ${src}/configuration_id ]]; then
        echo "ERROR: Source ($src) work-area is not a valid Perforce repository";
        exit 1;
      fi
      #echo "Src: $src"
      ;;

    t)
      if [[ -d ${OPTARG} ]]; then
        targ=$(readlink -f ${OPTARG})
      else
        targ=${OPTARG}
      fi
      #echo "Targ: $targ"
      ;;

    n)
      no_update=true
      ;;

    v)
      verbose=true
      ;;

    h)
      print_help
      exit 0
      ;;

    :)
      echo -e "ERROR: Option -${OPTARG} requires an argument\n" >&2
      print_help
      exit 1
      ;;

    \?)
      echo -e "ERROR: Invalid option: -${OPTARG}\n" >&2
      print_help
      exit 1
      ;;
  esac
done

# Remove all option arguments and leave "$@" with just the non-option arguments
shift $((OPTIND-1))

# Determine which CL to update to ______________________________________________________________________________________
src_proj=$(grep -Po "\w+(?=/)" ${src}/configuration_id)
src_branch=$(grep -Po "(?<=/)\w+(?=@)" ${src}/configuration_id)
src_cl=$(grep -Po "(?<=@)\d+" ${src}/configuration_id)
if [[ ! $src_cl =~ [0-9]+ ]] || [[ "$src_cl" == "0" ]]; then
  echo "ERROR: Unable to determine source work-area changelist"
  exit 1
fi

if [[ -f ${targ}/configuration_id ]]; then
  targ_proj=$(grep -Po "\w+(?=/)" ${targ}/configuration_id)
  targ_branch=$(grep -Po "(?<=/)\w+(?=@)" ${targ}/configuration_id)
  targ_cl=$(grep -Po "(?<=@)\d+" ${targ}/configuration_id)

  if [[ "$src_proj" != "$targ_proj" ]]; then
    echo -e "ERROR: Source and Target workareas belong to different projects\n" >&2
    exit 1
  fi
else
  targ_create=1;
fi

targ_upd=$(( ${src_cl} != ${targ_cl} ))

# Print the input options ______________________________________________________________________________________________
echo "Source : $src"
echo "    CL : $src_cl"
echo "Target : $targ"
echo "Create : $targ_create"
echo "Update : $targ_upd"
echo


# Source ===============================================================================================================
(
cd $src
echo -e "\n${fg_green}[Bootenv into Source work-area: $PWD]${reset}"
. /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv

## Copy files opened in Source
echo -e "\n${fg_green}[Create list of files opened/edited in Source work-area...]${reset}"
p4w opened > ${pipe}
) &


# Target ===============================================================================================================

# Create/Update Target
if (( $targ_create > 0 )); then
  echo -e "\n${fg_green}[Target work-area is not a valid Perforce repository. Creating it...]${reset}"
  if [[ ! -d $targ ]]; then
    command mkdir -p $targ
  fi
  command cd $targ
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash
  p4_mkwa -configuration_id ${src_proj}/${src_branch}@${src_cl}
else
  command cd $targ
  echo -e "\n${fg_green}[Bootenv into Target work-area: $PWD]${reset}"
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv

  if [[ "$src_branch" != "$targ_branch" ]]; then
    echo "  Source and Target workareas on a different branch. Will try to change Target workarea's branch\n"
    p4_mkwa -change_branch ${src_branch}
  fi

  if (( $targ_upd > 0 )); then
    echo -e "\n${fg_green}[Updating Target work-area to CL=${src_cl}]${reset}"
    p4w update_env @$src_cl
  fi
fi

echo -e "\n${fg_green}[Copying all modified files from Source...]${reset}"
while read; do
  echo $REPLY
  file=$(echo $REPLY | perl -pe 's,^.*?/trunk/|#.*$,,g')
  if [[ "$REPLY" =~ "edit default change" ]]; then
    p4w edit $file
  fi
  command cp ${src}/$file ${targ}/$file
  if [[ "$REPLY" =~ "add default change" ]]; then
    p4w add ${targ}/$file
  fi
done < ${pipe}

# Clean-up =============================================================================================================
function finish() {
  echo -e "\n${fg_green}[Cleaning up...]${reset}"
  command rm ${pipe} &> /dev/null
}

trap finish EXIT
