#!/usr/bin/env perl

##======================================================================================================================
## Documentation                                                                                                    {{{1
##======================================================================================================================
=head1 NAME

 spin

=head1 AUTHOR

 Kartik Shenoy
 (Based on Glenn Strunk's script try)

=head1 DESCRIPTION

 Keep looping until input predicate succeeds

=head1 SYNOPSIS

 spin [OPTIONS]

 spin --model <model>
 spin --job <lsf_job_id>

 spin -h|--help|--man

=head1 OPTIONS

 Mandatory arguments, exactly one must be specified:
 -p, --predicate=PRED  Spin till the PRED succeeds
 -m, --model=MODEL     Spin till the specified model was built successfully
 -j, --job=PATTERN     If PATTERN is a number, spin till the JobId=PATTERN completes.
                       If PATTERN is alphanumeric, spin till all jobs submitted by user=PATTERN complete.
                       By default, the check is performed once every 5mins to prevent loading the lsf_server

 Optional Arguments:
 -a, --alert[=MSG]     Show a notification when the condition succeeds.
                       If a string is also provided, it'll will be displayed as well.
 -A, --noalert         Don't show any notifications upon completion
 -h                    Brief help
 -i, --interval=I      Wait I seconds before checking again. [Default=60s]
     --man             Show the manpage
 -n, --num-tries=N     Try N times before giving up. [Default=infinite].
     --while           Spin while the input predicate is true. Runs the provided command when the predicate fails
     --verbose         Verbose mode. Print values of all arguments

=head1 EXAMPLES

 Wait for tb_ch_nopll_4c16m model to be built:
     spin --predicate='[[ -f $STEM/build/tb_ch_nopll_4c16m/BUILD_SUCCEEDED ]]'
     spin  -p         '[[ -f $STEM/build/tb_ch_nopll_4c16m/BUILD_SUCCEEDED ]]'

 Or using -m/--model:
     spin --model=tb_ch_nopll_4c16m
     spin  -m     tb_ch_nopll_4c16m

 Wait till tb_ch_nopll_4c16m is built and execute the run_job command
     spin -m tb_ch_nopll_4c16m && run_job ...

 Wait for tb_ch_nopll_4c16m model to be built, check every 5 mins
     spin -m tb_ch_nopll_4c16m -i 300

 Wait till a specific lsf_job completes
     spin --job=1234567
     spin  -j   1234567

 Wait till all jobs submitted by a user completes
     spin -j kshenoy

 Wait till an lsf_job completes, check once every 10 mins and try 5 times before calling it quits
     spin -j 1234567 -i 600 -n 5

=cut
# }}}1

use strict;
use diagnostics;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
#use Term::ANSIColor qw(:constants);


Getopt::Long::Configure("bundling");
#Getopt::Long::Configure("pass_through");
$Data::Dumper::Sortkeys = 1;


# Forward Declarations
sub Alert;


## Option Handling =====================================================================================================
my %opts = (                                                                                                      # {{{1
  'alert'         => 1,
  'alert_msg_set' => 0,
  'alert_msg'     => "\'Okidoki, job done!\'",
  'interval'      => 60,
  'num_tries'     => -1,
  'predicate'     => "",
  'predicate_set' => 0,
  'interval_set'  => 0,
  'verbose'       => 0
);

GetOptions(                                                                                                       # {{{1
  \%opts,
  'alert|a:s',      => sub {
                             if ($_[1] ne "") {
                               $opts{'alert_msg'} = $_[1];
                               $opts{'alert_msg_set'} = 1;
                             }
                           },
  'noalert|A',      => sub { $opts{'alert'} = 0; },
  'interval|i=i'    => sub { $opts{'interval'} = $_[1];
                             $opts{'interval_set'} = 1; },
  'job|j=s'         => sub { pod2usage(
                               -message => "ERROR: Multiple uses of predicate detected."
                               -verbose => 0, -exitval => 1) if $opts{predicate_set};
                             if ($_[1] =~ /^\d+$/) {
                               $opts{'predicate'} .= "[[ -z \$(lsf_bjobs 2> /dev/null | command grep $_[1]) ]]";
                               $opts{'alert_msg'}  = "LSF job $_[1] has finished" if (!$opts{'alert_msg_set'});
                             } else {
                               $opts{'predicate'} .= "[[ -z \$(lsf_bjobs -u $_[1] 2> /dev/null) ]]";
                               $opts{'alert_msg'}  = "All LSF jobs by $_[1] have finished" if (!$opts{'alert_msg_set'});
                             }
                             $opts{'predicate_set'} = 1;
                             $opts{'interval'}      = 60 if (!$opts{'interval_set'});
                       },
  'model|m=s'       => sub { pod2usage(
                               -message => "ERROR: Multiple uses of predicate detected."
                               -verbose => 0, -exitval => 1) if $opts{predicate_set};
                             $opts{'predicate'}    .= '[[ -f $STEM/build/' . $_[1] . '/BUILD_SUCCEEDED ]]';
                             $opts{'predicate_set'} = 1;
                             $opts{'interval'}      = 60 if (!$opts{'interval_set'});
                             $opts{'alert_msg'}     = "Model $_[1] was built successfully" if (!$opts{'alert_msg_set'});
                       },
  'num-tries|n=i',
  'predicate|p=s'   => sub { pod2usage(
                               -message => "ERROR: Multiple uses of predicate detected."
                               -verbose => 0, -exitval => 1) if $opts{predicate_set};
                             $opts{'predicate'}    .= $_[1];
                             $opts{'predicate_set'} = 1;
                       },
  'while'           => sub { $opts{'predicate'} = "! " .  $opts{'predicate'}; },
  'help|h|?'        => sub { pod2usage( -verbose => 99, -exitval => 0,
                                        -sections => [ qw(DESCRIPTION SYNOPSIS OPTIONS EXAMPLES) ] ); },
  'man'             => sub { pod2usage( -verbose => 2,  -exitval => 0 ); },
  'verbose!',
) or pod2usage(-verbose => 1);
# }}}1

if (! $opts{predicate_set}) {
  pod2usage(-verbose => 1, -exitval => 1, -message => "ERROR: One of --model/--predicate must be provided\n");
}
print "INFO: Ignoring extra arguments '@ARGV'\n" if ($#ARGV >= 0);

## Dump the input arguments
print Dumper(\%opts) if $opts{'verbose'};
# }}}1

my $n=0;
do {
  if (  (system($opts{'predicate'}) == 0)
     && $opts{'alert'}
     ) {
    Alert(0);
  }

  $n++;
  sleep $opts{'interval'};
} while ($n != $opts{'num_tries'});  # Intentionally using != so that we can run infinitely when num_tries = -1

pod2usage(-verbose => 0, -exitval => 1, -message => "ERROR: Hit limit on number of tries");
$opts{'alert_msg'} = "Hit limit on number of tries";
Alert(1);


sub Alert {
  my ($status) = @_;

  my $cmd = "notify-send --urgency=low -i ";
  $cmd   .= ($status == 0 ? "terminal" : "error" );
  $cmd   .= " '$opts{'alert_msg'}'";

  # print "$cmd\n";
  system($cmd);
  exit $status;
}
