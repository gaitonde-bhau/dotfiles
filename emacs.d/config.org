#+TITLE: Emacs Configuration
#+OPTIONS: auto-id:t

* Init
:PROPERTIES:
:CUSTOM_ID: h:b13bc7d4-281f-44b7-95c5-aca12b96d689
:END:
** Archives
:PROPERTIES:
:CUSTOM_ID: h:45fea474-997a-4cc3-ad1e-17064f71b695
:END:
#+BEGIN_SRC emacs-lisp
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives '("melpa" . "https://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)

  (when (>= emacs-major-version 24)
    (when (>= emacs-minor-version 4)
      (setq load-prefer-newer t))
    (require 'package))

  (package-initialize)
#+END_SRC

** use-package
:PROPERTIES:
:CUSTOM_ID: h:8f834fca-3a0e-4755-8a18-6afe69aad21f
:END:
[[https://www.youtube.com/watch?v%3D2TSKxxYEbII][use-package video tutorial]]

Install and load use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (defvar use-package-verbose t)
    (require 'use-package)
    (require 'bind-key)
    (require 'diminish)
    (setq use-package-always-ensure t)
    (if (daemonp)
        (setq use-package-always-demand t)))

  (bind-key* "C-h B" 'describe-personal-keybindings)
#+END_SRC

** TODO Check if there's a way to keep all the config in this file itself with init.el being empty
:PROPERTIES:
:CUSTOM_ID: h:f1c5cc2f-e694-40d9-bd2b-a0430076c314
:END:
Sacha Chua seems to have something like that. Her init.el is simply a link.
Maybe some information in this [[https://www.reddit.com/r/emacs/comments/4uo9r0/shaving_time_on_emacs_startup_from_org_literate/][reddit thread]].

* Visual
:PROPERTIES:
:CUSTOM_ID: h:0613d4ad-1d3e-4425-a6b4-ee238042a64f
:END:
#+BEGIN_SRC emacs-lisp
  ;; Disable anoying beep
  (setq ring-bell-function 'ignore)

  ;; Improve rendering performance
  (setq redisplay-dont-pause t)

  ;; Display a special glyph in the fringe of each empty line at the end of the buffer
  (setq indicate-empty-lines t)
#+END_SRC

** Frame related
:PROPERTIES:
:CUSTOM_ID: h:b9951130-defe-46b5-bca5-35f01fb85dab
:END:
Set size of default frame
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist
        '((top    . 0)
          (left   . 0)
          (width  . 237)
          (height . 66)))
#+END_SRC

Start maximized
#+BEGIN_SRC emacs-lisp
  ;; Open in fullscreen
  (defun my/switch-fullscreen nil
    "Switch to fullscreen. Works in OSX."
    (interactive)
    (let* ((modes '(nil fullboth fullwidth fullheight))
           (cm (cdr (assoc 'fullscreen (frame-parameters))))
           (next (cadr (member cm modes))))
      (modify-frame-parameters
       (selected-frame)
       (list (cons 'fullscreen next)))))
  ;; (my/switch-fullscreen)

  ;; Start maximized
  ;; (custom-set-variables '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Transparency
#+BEGIN_SRC emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(85 85))
  ;; (add-to-list 'default-frame-alist '(alpha 85 85))
#+END_SRC

Avoid Emacs hanging for a while after changing default font:
#+BEGIN_SRC emacs-lisp
  ;; (modify-frame-parameters nil '((wait-for-wm . nil)))
#+END_SRC

*** TODO Set frame size based on home/work
:PROPERTIES:
:CUSTOM_ID: h:6a732008-4dfc-4eae-9e60-16cc633372c3
:END:

** Clean-up
:PROPERTIES:
:CUSTOM_ID: h:907fe3c0-0aac-4a06-a423-5c6dad15abf1
:END:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (menu-bar-mode -1)
  ;; (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

We can also put something like this into =~/.Xresources= to enable/disable certain things as soon as Emacs starts
#+BEGIN_EXAMPLE
Emacs.verticalScrollBars: off
Emacs.toolBar: off
#+END_EXAMPLE

** Mode line
:PROPERTIES:
:CUSTOM_ID: h:a74142e4-3cd0-4feb-8003-5273b4a10ea0
:END:
#+BEGIN_SRC emacs-lisp
  ;; Show column number in bottom bar
  (setq column-number-mode t)
#+END_SRC

* General
:PROPERTIES:
:CUSTOM_ID: h:e872ba61-2943-4b5f-976a-9045a10107d6
:END:
** Keybinds
:PROPERTIES:
:CUSTOM_ID: h:d4e6fc2c-28e1-47f7-860a-42ed5ea2bfcf
:END:
By default =C-x == is bound to /what-cursor-position/ but evil maps both =ga= and =g8= to that as well so might as well use it to show something useful.
#+BEGIN_SRC emacs-lisp
  (bind-key* "C-x =" 'describe-char)
#+end_src

#+begin_src emacs-lisp
  (defun my/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (bind-key* "<f5>" 'my/revert-buffer-no-confirm)
#+END_SRC

*** Enable/Disable/Toggle ala vim-unimpaired
:PROPERTIES:
:CUSTOM_ID: h:3c4b0674-d521-454a-8039-064ef4edbfac
:END:
I think the following would be handy
  =[= - Enable setting
  =~= - Toggle setting
  =]= - Disable setting

#+BEGIN_SRC emacs-lisp
  (bind-keys* :prefix-map emacs-unimpaired-enable-map
              :prefix-docstring "This map is used to enable settings ala vim-unimpaired"
              :prefix "C-c [")
  (bind-keys* :prefix-map emacs-unimpaired-disable-map
              :prefix-docstring "This map is used to disable settings ala vim-unimpaired"
              :prefix "C-c ]")
  (bind-keys* :prefix-map emacs-unimpaired-toggle-map
              :prefix-docstring "This map is used to toggle settings ala vim-unimpaired"
              :prefix "C-c ~")
#+END_SRC
Note the use of /bind-keys*/ for the enable and disable maps and /bind-keys/ for the toggle map.
This is because /bind-keys*/ will override any maps that are defined by any modes.
Since =C-c [=, =C-c ~= and  =C-c ]= are all defined by org-mode, I want to override those definitions and hence put mine in the /override-global-mode/
On the other hand, since =C-c a-z= are reserved for the user, there's no need override anything and hence a simple /bind-keys/ will suffice.

Note that since /bind-keys*/ puts everything in the /override-global-mode/ map, it essentially ignores any =:map= that is passed to it.
Thus, once the prefixes and maps are defined, we have to use /bind-keys/ only to create new keybinds inside them.

*** Substitution map
:PROPERTIES:
:CUSTOM_ID: h:8fc683f0-bf77-4084-bacf-d8f952746ff6
:END:
#+BEGIN_SRC emacs-lisp
  (bind-keys :prefix-map my-s-bindings-map
             :prefix-docstring "This map is used to group together all substitution related bindings"
             :prefix "C-c s")
#+END_SRC

** Custom file
:PROPERTIES:
:CUSTOM_ID: h:4fa309b1-b455-4e51-bfc4-7296a6342f1f
:END:
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+END_SRC

** Backup
:PROPERTIES:
:CUSTOM_ID: h:31607b99-cc66-4be1-94dd-f0f8bfcf85ea
:END:
#+BEGIN_SRC emacs-lisp
  (defvar backup-directory (concat user-emacs-directory "/tmp/backups"))
  (if (not (file-exists-p backup-directory)) (make-directory backup-directory t))
  (setq backup-directory-alist `(("." . ,backup-directory)))
  (setq make-backup-files         t)  ; backup of a file the first time it is saved.
  (setq backup-by-copying         t)  ; don't clobber symlinks
  (setq version-control           t)  ; version numbers for backup files
  (setq delete-old-versions       t)  ; delete excess backup files silently
  (setq delete-by-moving-to-trash t)
  (setq kept-old-versions         6)  ; oldest versions to keep when a new numbered backup is made (default: 2)
  (setq kept-new-versions         9)  ; newest versions to keep when a new numbered backup is made (default: 2)
#+END_SRC

** TODO Autosave
:PROPERTIES:
:CUSTOM_ID: h:eac166b3-83d2-4bca-ac9f-a02a6f047ce3
:END:
Freezes the window while autosaving. Bloody annoying!

#+BEGIN_SRC emacs-lisp
  (defvar autosave-directory (concat user-emacs-directory "/tmp/autosaves"))
  (if (not (file-exists-p autosave-directory)) (make-directory autosave-directory t))
  (setq auto-save-file-name-transforms `(("." ,autosave-directory t)))
  (setq auto-save-default nil)  ; auto-save every buffer that visits a file
#+END_SRC

** History
:PROPERTIES:
:CUSTOM_ID: h:2ab3fa7b-04b1-455e-941c-44d2bfc626f4
:END:
Delete identical history entries
#+BEGIN_SRC emacs-lisp
(setq history-delete-duplicates t)
#+END_SRC

Save mini-buffer history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (setq savehist-file (concat user-emacs-directory "tmp/history.el")
          history-length 100)
    :config
    (savehist-mode t))
#+END_SRC

** UTF-8 Please
:PROPERTIES:
:CUSTOM_ID: h:d02fcd1a-910b-46bd-a093-ec0ed7e913b0
:END:
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system   'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-language-environment    "UTF-8")
  (prefer-coding-system        'utf-8)
#+END_SRC

** TODO Fonts
:PROPERTIES:
:CUSTOM_ID: h:5cd588d9-dc03-4b39-8f35-478a5e6277bd
:END:
The reason for adding the hook is that if I try to create a daemon, it errors out with
    /error: Window system is not in use or not initialized/
This is because we try to set a face-attribute before a frame is created which is a no-no for some reason.

However, the downside to this is that if I have multiple such 'when' sections (like in private.el) we can't dictate the order in which they're applied.
#+BEGIN_SRC emacs-lisp
  (defun my/font-exist-p (font)
    " Check if font exists"
    (if (null (x-list-fonts font)) nil t))

  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (when (eq system-type 'gnu/linux)

                (when (my/font-exist-p "DejaVu Sans Mono")
                  (setq my-variable-pitch-font "DejaVu Sans Mono-11"
                        my-monospaced-font     "DejaVu Sans Mono-11"))

                (when (my/font-exist-p "Hack")
                  (setq my-variable-pitch-font "Hack-10"
                        my-monospaced-font     "Hack-10"))

                (set-face-attribute 'default        nil :font my-variable-pitch-font)
                (set-face-attribute 'fixed-pitch    nil :font my-monospaced-font)
                (set-face-attribute 'variable-pitch nil :font my-variable-pitch-font))))
  ;;   (when (my/font-exist-p "MesloLGMDZ Nerd Font")
  ;;     (setq my-variable-pitch-font "MesloLGMDZ Nerd Font-10"
  ;;           my-monospaced-font     "MesloLGMDZ Nerd Font-10"))

  ;;   (when (my/font-exist-p "DejaVu Sans")      (setq my-variable-pitch-font "DejaVu Sans-10"))
  ;;   (when (my/font-exist-p "DejaVu Sans Mono") (setq my-monospaced-font     "DejaVu Sans Mono-10")))

  (when (eq system-type 'windows-nt)
    (when (my/font-exist-p "Consolas")
      (setq my-variable-pitch-font "Consolas-10"
            my-monospaced-font     "Consolas-10"))
    (when (my/font-exist-p "Hack")
      (setq my-variable-pitch-font "Hack-10"
            my-monospaced-font     "Hack-10"))
    (set-face-attribute 'default        nil :font my-variable-pitch-font)
    (set-face-attribute 'fixed-pitch    nil :font my-monospaced-font)
    (set-face-attribute 'variable-pitch nil :font my-variable-pitch-font))
#+END_SRC

Fall back to DejaVu Sans when the font lacks support for some glyphs. Taken from [[https://github.com/joodie/emacs-literal-config/blob/c66e30ce961b140dd3e84116f4d45cbc19d0d944/emacs.org#font][github:joodie]]
How does this work? What is it supposed to do?
#+BEGIN_SRC emacs-lisp :tangle no
  (when (functionp 'set-fontset-font)
    (set-fontset-font "fontset-default" 'unicode
                      (font-spec :family "DejaVu Sans Mono"
                                 :width 'normal
                                 :size 11
                                 :weight 'normal)))
#+END_SRC

Scale font size using =C-x C-+= and =C-x C--=. =C-x C-0= resets it.
=text-scale-mode-step= controls the scaling factor. For obvious reasons, don't set it to 1 else it won't change at all
#+BEGIN_SRC emacs-lisp
  (setq text-scale-mode-step 1.1)
  (setq line-spacing 2)
#+END_SRC

** Tabs, Indentation and Spacing
:PROPERTIES:
:CUSTOM_ID: h:cc854adc-4c20-417f-85ab-b2b127ec6249
:END:
Use only spaces and no tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default show-trailing-whitespace t)

  ;; (bind-key "RET" 'newline-and-indent)
#+end_src
Since these are buffer-local variables, I have to use =setq-default=

*** Enable/Disable/Toggle Trailing whitespace
:PROPERTIES:
:CUSTOM_ID: h:c0d2d6d9-e1f8-4002-bc1c-46260bceb4f9
:END:
#+BEGIN_SRC emacs-lisp
  (defun my/toggle-trailing-whitespace ()
    "Toggle trailing whitespace"
    (interactive)  ; Allows to be called as a command via M-x
    (setq-default show-trailing-whitespace (not show-trailing-whitespace)))

  (bind-keys :map emacs-unimpaired-enable-map
             ("SPC" . (lambda () (interactive)(setq-default show-trailing-whitespace t)))
             :map emacs-unimpaired-disable-map
             ("SPC" . (lambda () (interactive)(setq-default show-trailing-whitespace nil)))
             :map emacs-unimpaired-toggle-map
             ("SPC" . my/toggle-trailing-whitespace))
#+END_SRC

*** Delete trailing whitespace
:PROPERTIES:
:CUSTOM_ID: h:ed4ca61d-ea45-4530-beaa-3a24d25b32e7
:END:
From [[https://www.emacswiki.org/emacs/DeletingWhitespace#toc3][emacswiki:]]
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Use =C-c s SPC= to delete trailing whitespace manually
#+BEGIN_SRC emacs-lisp
  (bind-keys :map my-s-bindings-map
             ("SPC" . delete-trailing-whitespace))
#+END_SRC

*** Toggle wrap
:PROPERTIES:
:CUSTOM_ID: h:37f6c771-5673-4416-97dc-4a0f85c9d502
:END:
#+BEGIN_SRC emacs-lisp
  (bind-key "w" 'toggle-truncate-lines emacs-unimpaired-toggle-map)
#+END_SRC

** Highlight current line
:PROPERTIES:
:CUSTOM_ID: h:b8f6f0e9-5fc6-4294-8fc3-190b339b05d3
:END:
#+BEGIN_SRC emacs-lisp
  ;; (global-hl-line-mode 1)
  (bind-key "c" 'global-hl-line-mode emacs-unimpaired-toggle-map)
#+END_SRC

*** TODO FIXME
:PROPERTIES:
:CUSTOM_ID: h:b1e7fad4-20fe-47a3-9470-5bae1601f36f
:END:
#+BEGIN_SRC emacs-lisp
  (bind-key "c" (global-hl-line-mode 1)  emacs-unimpaired-enable-map)
  (bind-key "c" (global-hl-line-mode -1) emacs-unimpaired-disable-map)
#+END_SRC

** Simpler y/n answers
:PROPERTIES:
:CUSTOM_ID: h:893a0773-f84f-4f5c-a6ad-66d4451923dd
:END:
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Matching Parens
:PROPERTIES:
:CUSTOM_ID: h:172408f5-623b-4e63-a8c6-83a53860e31d
:END:
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  ;; (setq show-paren-style 'expression)
#+END_SRC

** Misc
:PROPERTIES:
:CUSTOM_ID: h:4b0bd578-b9df-4e64-8a04-6804726250bf
:END:
#+BEGIN_SRC emacs-lisp
  ;; Count 1 space after a period as the end of a sentence, instead of 2
  (setq sentence-end-double-space nil)

  ;; Enable editing by visual lines
  (global-visual-line-mode t)
  (diminish 'visual-line-mode)

  ;; Let emacs react faster to keystrokes
  (setq echo-keystrokes 0.1)
  (setq idle-update-delay 0.35)

  ;; Jump to the help window when it's opened.
  ;; Press q to close it and restore the view to the previous buffer
  (setq help-window-select t)
#+END_SRC

** Winner mode
:PROPERTIES:
:CUSTOM_ID: h:6ad960fe-38f3-46cf-9982-73d35b6b9518
:END:
Undo and Redo changes in window configuration. Use =C-c right= and =C-c left= to switch between different layouts.
This is useful when I close a window by mistake to undo it and restore the window layout.
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Theme Directories
:PROPERTIES:
:CUSTOM_ID: h:8696b918-4f92-48c8-a925-6b63118157ff
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "/themes"))
  (add-to-list 'load-path (concat user-emacs-directory "/themes"))
#+END_SRC

** Emacs server
:PROPERTIES:
:CUSTOM_ID: h:3ce0afb3-b180-4ac2-b076-685cf068e201
:END:
- Always start the emacs-server, except when run in daemon mode
- Already Disable prompt asking you if you want to kill a buffer with a live process attached to it.
  http://stackoverflow.com/questions/268088/how-to-remove-the-prompt-for-killing-emacsclient-buffers

#+BEGIN_SRC emacs-lisp
  (use-package server
    ;; :disabled
    :config
    (unless (or (daemonp) (server-running-p))
      (server-mode 1))
    (add-hook 'server-switch-hook 'raise-frame))
#+END_SRC

Alias for emacsclient:
This will launch emacsclient if a server is already running and launch emacs if not
#+BEGIN_EXAMPLE
  alias e='emacsclient --alternate-editor="emacs" --create-frame --quiet'
#+END_EXAMPLE

** Mouse
:PROPERTIES:
:CUSTOM_ID: h:b65c491f-76bd-4558-a4a6-7d88c89cea7d
:END:
Mouse-wheel acts on the hovered window rather than the one where the typing focus is
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-follow-mouse t)
#+END_SRC

** TODO Scratch
:PROPERTIES:
:CUSTOM_ID: h:68b8d2ec-ece8-4f73-af3a-83f87d700023
:END:
Mode-specific scratch buffers?

* Packages
:PROPERTIES:
:CUSTOM_ID: h:7cf6a220-380c-4b32-8833-18f97bd60476
:END:
** TODO hydra
:PROPERTIES:
:CUSTOM_ID: h:19d345f5-c20b-4b41-a302-a5e635739a27
:END:
Seems like modular bindings. Very useful for
- Window movement etc.

More ideas in https::/github.com/kana/vim-submode

** evil
:PROPERTIES:
:CUSTOM_ID: h:2e3e3bcf-8e0c-4f3e-9d2d-2a5914cabb05
:END:
evil can be toggled using =C-z=

#+BEGIN_SRC emacs-lisp
  (use-package evil
    ;; :disabled
    :init
    ;; (setq evil-want-C-u-scroll t)
    (setq evil-want-C-w-in-emacs-state t)
    (evil-mode t)
#+END_SRC

*** :config
:PROPERTIES:
:CUSTOM_ID: h:413028be-e035-4d93-8ba3-5ef3f95063f5
:END:
#+BEGIN_SRC emacs-lisp
  :config
#+END_SRC

**** evil-commentary
:PROPERTIES:
:CUSTOM_ID: h:1655d373-867e-4bab-9348-25f58476fb32
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :diminish evil-commentary-mode
    :config (evil-commentary-mode))
#+END_SRC

**** evil-surround
:PROPERTIES:
:CUSTOM_ID: h:6394835f-85a8-44c9-b64f-c45e9f951f9f
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config (global-evil-surround-mode))
#+END_SRC

**** evil-visualstar
:PROPERTIES:
:CUSTOM_ID: h:a7f569b2-3176-4d88-87ea-2fa743dd4994
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :config (global-evil-visualstar-mode))
#+END_SRC

**** evil-exchange
:PROPERTIES:
:CUSTOM_ID: h:45705aa6-ec0f-428e-a995-4dc6dbdb3f8e
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :config (evil-exchange-cx-install))
#+END_SRC

**** evil-matchit
:PROPERTIES:
:CUSTOM_ID: h:e4b3634c-0a16-4bb9-9f50-eaa980056a4a
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit)
#+END_SRC

**** Keybinds
:PROPERTIES:
:CUSTOM_ID: h:403aae41-dacc-4418-87b6-49e005cfb94b
:END:
Make /Escape/ quit everything
#+BEGIN_SRC emacs-lisp
  (defun my/minibuffer-keyboard-quit ()
    "Abort recursive edit.
          In Delete Selection mode, if the mark is active, just deactivate it;
          then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  (bind-key [escape] 'keyboard-quit            evil-normal-state-map          )
  (bind-key [escape] 'keyboard-quit            evil-visual-state-map          )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-map           )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-ns-map        )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-completion-map)
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-must-match-map)
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-isearch-map   )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (bind-key "g a" 'describe-char evil-normal-state-map)
  (bind-key "U" 'redo evil-normal-state-map)
  (bind-key "] SPC" '(lambda () (interactive)(end-of-line)(newline))           evil-normal-state-map)
  (bind-key "[ SPC" '(lambda () (interactive)(beginning-of-line)(open-line 1)) evil-normal-state-map)
#+END_SRC

*** END
:PROPERTIES:
:CUSTOM_ID: h:c5616623-92e8-424d-8143-014fa328c7ef
:END:
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

** flycheck
:PROPERTIES:
:CUSTOM_ID: h:835dd876-927b-46bb-87ad-8b9c00ab0c20
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :disabled
    :diminish flycheck-mode
    :init (global-flycheck-mode t)
    :config
    (use-package flycheck-sml
      :ensure nil
      :load-path "bundle/flycheck-sml/"))
#+END_SRC

** helm
:PROPERTIES:
:CUSTOM_ID: h:6db31ca2-7596-47d7-bc56-874876af18f4
:END:
[[http://tuhdo.github.io/helm-intro.html][Introduction to Helm by reddit:/u/tuhdo]]

#+BEGIN_SRC emacs-lisp
  (use-package helm
    ;; :disabled
    :diminish helm-mode
#+END_SRC

*** :init
:PROPERTIES:
:CUSTOM_ID: h:563721c1-eab9-4f5d-a934-fadb291712f6
:END:
#+BEGIN_SRC emacs-lisp
  :init
  (require 'helm-config)

  (setq helm-quick-update                     t   )
  (setq helm-idle-delay                       0.0 )
  (setq helm-input-idle-delay                 0.01)
  (setq helm-split-window-in-side-p           t   )  ; open helm buffer inside current window, not occupy whole other window
  (setq helm-move-to-line-cycle-in-source     t   )  ; move to end or beginning of source when reaching top or bottom of source
  (setq helm-display-header-line              nil )  ; Disable the header

  (setq helm-M-x-fuzzy-match                  t   )
  (setq helm-apropos-fuzzy-match              t   )
  (setq helm-buffers-fuzzy-matching           t   )
  (setq helm-completion-in-region-fuzzy-match t   )
  (setq helm-imenu-fuzzy-match                t   )
  (setq helm-lisp-fuzzy-completion            t   )
  (setq helm-locate-fuzzy-match               t   )
  (setq helm-mode-fuzzy-match                 t   )
  (setq helm-recentf-fuzzy-match              t   )
  (setq helm-semantic-fuzzy-match             t   )

  (helm-mode t)
  (helm-autoresize-mode t)
  (semantic-mode t)
#+END_SRC

*** :config
:PROPERTIES:
:CUSTOM_ID: h:f04f3450-2360-4e31-8c74-db5cd596995c
:END:
#+BEGIN_SRC emacs-lisp
  :config
#+END_SRC

**** Remove sub-headers line if only a single source; keep them for multiple sources
:PROPERTIES:
:CUSTOM_ID: h:6c52baa7-1f97-4b93-ae62-27900466a625
:END:
#+BEGIN_SRC emacs-lisp
  (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
  (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
  (defvar helm-source-header-default-box        (face-attribute 'helm-source-header :box))

  (defun helm-toggle-header-line ()
    (if (> (length helm-sources) 1)
        (set-face-attribute 'helm-source-header nil
                            :foreground helm-source-header-default-foreground
                            :background helm-source-header-default-background
                            :box helm-source-header-default-box
                            :height 1.0)
      (set-face-attribute 'helm-source-header nil
                          :foreground (face-attribute 'helm-selection :background)
                          :background (face-attribute 'helm-selection :background)
                          :box nil
                          :height 0.1)))
  (add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)
#+END_SRC

**** helm-descbinds
:PROPERTIES:
:CUSTOM_ID: h:fa26ada6-ef40-4311-92f4-df4d1877bbe0
:END:
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :init (helm-descbinds-mode t))
#+END_SRC

Note that helm-descbinds will replace the default /describe-bindings/.
Thus =C-h b= can be used for it; no need to create a new binding.

**** helm-projectile
:PROPERTIES:
:CUSTOM_ID: h:30f0f898-ea0e-4e94-b5a0-7b4fd18fe5de
:END:
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+END_SRC

*** Keybinds
:PROPERTIES:
:CUSTOM_ID: h:fa05ad14-8a2e-41f4-b94a-a78568388cdb
:END:
Remove the default prefix =C-x c=. Note this is still a part of :config
#+BEGIN_SRC emacs-lisp
  (unbind-key "C-x c")
#+END_SRC

This allows us to create new custom bindings within helm's default map thereby allowing us to use the default keybindings as well
We redefine /helm-command-prefix/ here
#+BEGIN_SRC emacs-lisp
  :bind* (("M-x"   . helm-M-x)
          ("C-h a" . helm-apropos))

  :bind (("C-c h" . helm-command-prefix)
         :map       helm-command-map
         ("b"     . helm-buffers-list)
         ("f"     . helm-find-files)    ; Find files in the current directory
         ("m"     . helm-mini)          ; m - mixed
         ("p"     . helm-projectile)
         ("/"     . helm-occur))        ; search in all open buffers
#+END_SRC

=C-x C-s= can be used after =helm-occur= to save the results to a buffer.

Other useful default keybinds:
|--------------+-----------------------------+-----------------------------------------------------------|
| <prefix> a   | helm-apropos                | Combination of describe-function, variable, commands etc. |
| <prefix> i   | helm-semantic-or-imenu      | Similar to outline mode (in vim)                          |
| <prefix> o   | helm-org-in-buffer-headings | Jump to org section heading                               |
| <prefix> r   | helm-regexp                 | Construct a regexp                                        |
| <prefix> C-, | helm-calcul-expression      | Interface to calc command                                 |
| C-x r b      | helm-filtered-bookmarks     |                                                           |
|--------------+-----------------------------+-----------------------------------------------------------|

*** use-package END
:PROPERTIES:
:CUSTOM_ID: h:30ee671c-23b4-4b78-9622-45cc06c097ab
:END:
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

** linum-relative
:PROPERTIES:
:CUSTOM_ID: h:c7842971-98ae-483c-b02a-63c054609dfc
:END:
Relative line-numbers ala vim
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :disabled
    :diminish linum-relative-mode
    :init
    (setq linum-relative-current-symbol "")
    (linum-relative-global-mode t))
#+END_SRC

*** TODO Figure out why it's necessary to explicitly specify :background for 'linum-relative-current-face
:PROPERTIES:
:CUSTOM_ID: h:d6a080d6-2990-4be0-9924-8f496f701cb4
:END:
Shouldn't it inherit from 'linum?

*** TODO Fix ugly gaps in linum-face when lines wrap. [[http://emacs.stackexchange.com/a/897/9690][StackExchange Discussion]]
:PROPERTIES:
:CUSTOM_ID: h:36ed6e58-dff9-4f78-83c9-38f56b7e1b64
:END:
#+BEGIN_SRC emacs-lisp
  (defvar my-linum-gapless-margin-display
    `((margin left-margin) ,(propertize "     " 'face 'linum))
    "String used on the margin.")

  (defvar-local my-linum-gapless-margin-overlays nil
    "List of overlays in current buffer.")

  (defun my-linum-gapless-make-overlay-at (p)
    "Create a margin overlay at position P."
    (push (make-overlay p (1+ p)) my-linum-gapless-margin-overlays)
    (overlay-put
     (car my-linum-gapless-margin-overlays) 'before-string
     (propertize " "  'display my-linum-gapless-margin-display)))

  (defun my-linum-gapless-setup-margin-overlays ()
    "Put overlays on each line which is visually wrapped."
    (interactive)
    (let ((ww (- (window-width)
                 (if (= 0 (or (cdr fringe-mode) 1)) 1 0)))
          ov)
      (mapc #'delete-overlay my-linum-gapless-margin-overlays)
      (save-excursion
        (goto-char (point-min))
        (while (null (eobp))
          ;; On each logical line
          (forward-line 1)
          (save-excursion
            (forward-char -1)
            ;; Check if it has multiple visual lines.
            (while (>= (current-column) ww)
              (my-linum-gapless-make-overlay-at (point))
              (forward-char (- ww))))))))

  ;; (add-hook 'linum-before-numbering-hook #'my-linum-gapless-setup-margin-overlays)
#+END_SRC

** macrostep
:PROPERTIES:
:CUSTOM_ID: h:f0ffd993-5f5b-40cc-8b4f-b99e8c8769c4
:END:
Expand a macro and enter macrostep-mode by pressing /C-c m e/.
Once in macrostep-mode, press /e/ to expand, /c/ to collapse and /q/ to quit

#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :disabled
    :bind ("C-c m e" . macrostep-expand))
#+END_SRC

** org
:PROPERTIES:
:CUSTOM_ID: h:080c3337-de87-4d2e-890a-1e047392f89a
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org
   :ensure org-plus-contrib
   :pin org
#+END_SRC

*** :init
:PROPERTIES:
:CUSTOM_ID: h:ca544f41-e5df-4476-99fd-fa8da996bf74
:END:
#+BEGIN_SRC emacs-lisp
  :init
  (setq org-indent-mode t)

  (setq org-directory "~/Notes/")
  (setq org-default-notes-file (concat org-directory "organizer.org"))

  (setq org-M-RET-may-split-line '((item) (default . t)))
  (setq org-log-done 'time) ; 'time/'note
  ;; (setq org-special-ctrl-a/e t)
  ;; (setq org-return-follows-link nil)
  (setq org-use-speed-commands nil)
  ;; (setq org-speed-commands-user nil)
  (setq org-startup-align-all-tables nil)
  ;; (setq org-log-into-drawer nil)
  (setq org-use-property-inheritance t)
  (setq org-tags-column -80)
  (setq org-hide-emphasis-markers t)  ; Hide markers for bold/italics etc.
  (setq org-blank-before-new-entry '((heading . t) (plain-list-item . nil)))
  (setq org-link-search-must-match-exact-headline nil)
  (setq org-startup-with-inline-images t)
  (setq org-imenu-depth 10)
#+END_SRC

**** Org-agenda custom commands
:PROPERTIES:
:CUSTOM_ID: h:777edf92-ed17-4eab-a79a-3a6d1a3acbbf
:END:
Based on https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
#+BEGIN_SRC emacs-lisp
  (defun my/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (defun my/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-span 3)))
            (alltodo ""
                     ((org-agenda-skip-function '(or (my/org-skip-subtree-if-habit)
                                                     (my/org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))))
#+END_SRC

**** Org Tag List
:PROPERTIES:
:CUSTOM_ID: h:4ec8545f-1a7f-422b-8444-b3669a990e3b
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '((:startgrouptag) ("Work")
                        (:grouptags)     ("Project") ("Module") ("Feature") ("Tools")
                        (:endgrouptag)
                        (:startgrouptag) ("Project")
                        (:grouptags)     ("AS") ("AH") ("BR") ("ZN")
                        (:endgrouptag)
                        (:startgrouptag) ("Module")
                        (:grouptags)     ("L2") ("L2L3") ("L3") ("XI") ("MCA")
                        (:endgrouptag)
                        (:startgrouptag) ("Feature")
                        (:grouptags)     ("BusLock") ("DebugBus") ("L3F") ("MeshGating") ("QoS") ("RangeLock")
                                         ("RAS") ("TraceCapture")
                        (:endgrouptag)
                        (:startgrouptag) ("Tools")
                        (:grouptags)     ("Formal")
                        (:endgrouptag)))
#+END_SRC

**** TODO Show the emphasis markers on point
:PROPERTIES:
:CUSTOM_ID: h:20e0e38b-c292-4d90-be0c-4c6163358e56
:END:
#+BEGIN_SRC emacs-lisp
  (defun org-show-emphasis-markers-at-point ()
    (save-match-data
      (if (and (org-in-regexp org-emph-re 2)
           (>= (point) (match-beginning 3))
           (<= (point) (match-end 4))
           (member (match-string 3) (mapcar 'car org-emphasis-alist)))
      (with-silent-modifications
        (remove-text-properties
         (match-beginning 3) (match-beginning 5)
         '(invisible org-link)))
        (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5))))))

  (add-hook 'post-command-hook 'org-show-emphasis-markers-at-point nil t)
#+END_SRC

**** org-babel, source blocks
:PROPERTIES:
:CUSTOM_ID: h:5346da4e-8084-4ec9-89d8-ead64f2381d3
:END:
Enable syntax highlighting within the source blocks and keep the editing popup window within the same window.
Also, strip leading and trailing empty lines if any.
/org-src-preserve-indentation/ will not add an extra level of indentation to the source code
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively                       t
        org-src-window-setup                           'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        ;; org-src-preserve-indentation                t
        org-src-tab-acts-natively                      t)
#+end_src

Languages which can be evaluated in Org-mode buffers.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((python     . t)
                                         (ruby       . t)
                                         (perl       . t)
                                         (sh         . t)
                                         (dot        . t))))
#+end_src

Ask for confirmation before evaluating? NO!
#+begin_src emacs-lisp
  (defun my/org-babel-evaluate-silent (lang body)
    "Do not ask for confirmation to evaluate these languages."
    (not (or (string= lang "emacs-lisp"))))

  ;; (setq org-confirm-babel-evaluate 'my/org-babel-evaluate-silent)
  ;; (setq org-confirm-babel-evaluate nil)
#+END_SRC

**** Clean View
:PROPERTIES:
:CUSTOM_ID: h:d9426993-d7f5-4ebe-90aa-e562fcad3167
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-hide-leading-stars t)
  (setq org-odd-level-only nil)

  ;; …▼•
  ;; (setq org-ellipsis " ▼" )              ; Use a fancy arrow to indicate a fold instead of '...'
#+END_SRC

**** ToDo States
:PROPERTIES:
:CUSTOM_ID: h:bb9269f6-f4dc-427b-aed2-071192813695
:END:
Custom keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCEL(c)")))
#+END_SRC

*** :config
:PROPERTIES:
:CUSTOM_ID: h:f751a0b0-a912-4ce8-b641-9e64cf7ad26f
:END:
#+BEGIN_SRC emacs-lisp
  :config
  (eval-after-load 'org-indent '(diminish org-indent-mode))
#+END_SRC

**** Make org-mode play nicely with Google Chrome
:PROPERTIES:
:CUSTOM_ID: h:3f70b37d-ea2d-4c42-b8cd-5b82834ce1f1
:END:
From [[http://stackoverflow.com/a/6309985/734153][StackOverflow]]
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program  "google-chrome")
#+END_SRC

**** Templates
:PROPERTIES:
:CUSTOM_ID: h:7c276593-3413-45f2-a8b6-8c8cc9550bca
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sl" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n" "<src lang=\"?\">\n\n</src>"))
#+END_SRC

**** Fonts
:PROPERTIES:
:CUSTOM_ID: h:74b40aa3-6f7e-4e97-a627-a90faea5ad6d
:END:
Variable pitch for non-code text taken from [[http://www.xiangji.me/2015/07/13/a-few-of-my-org-mode-customizations][here]].
#+BEGIN_SRC emacs-lisp
  (defun my/set-buffer-variable-pitch ()
    (interactive)
    (variable-pitch-mode t)
    (setq line-spacing 3)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code  nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

  ;; (add-hook 'org-mode-hook      'my/set-buffer-variable-pitch)
  ;; (add-hook 'eww-mode-hook      'my/set-buffer-variable-pitch)
  ;; (add-hook 'markdown-mode-hook 'my/set-buffer-variable-pitch)
  ;; (add-hook 'Info-mode-hook     'my/set-buffer-variable-pitch)
#+END_SRC

NOTE: =org-block-background= has been removed in Org 8.3.1 and from 9.0.0,
has been completely deprecated and it inherits from =org-block=

General configuration [[*Fonts][here]]

**** Delete links
:PROPERTIES:
:CUSTOM_ID: h:4b19a5e4-f147-48f8-807d-637e76258c1d
:END:
This is a counter-part to =org-insert-link=. From [[http://emacs.stackexchange.com/a/10714/9690][here]].
#+BEGIN_SRC emacs-lisp
  (defun my/org-replace-link-with-description ()
    "Replace an org link with its description. If a description doesn't exist, replace with its address"
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description))))
#+END_SRC

**** org-bullets
:PROPERTIES:
:CUSTOM_ID: h:224d116a-434c-4dc1-b773-5bf948d70523
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    ;; :disable
    :init
    ;; (setq org-bullets-bullet-list '("●"))
    ;; (setq org-bullets-bullet-list '("○"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

A good way to find more characters is to use =M-x insert-char=

**** org-agenda
:PROPERTIES:
:CUSTOM_ID: h:9439ba5b-3a6a-43a1-9476-c9a2adae50fd
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure nil
    :init
    (setq org-agenda-files
          (mapcar (lambda (x)
                    (let ((y (concat org-directory x)))
                      (and (file-exists-p y) y)))
                  '("organizer.org" "Software/" "Personal/")))

    (setq org-agenda-tags-column            -120) ; Monitors are wide, might as well use it :/
    (setq org-agenda-skip-scheduled-if-done t)    ; Why isn't this default?
    (setq org-agenda-skip-deadline-if-done  t))
#+END_SRC

[[#h:7c86a221-7ef3-4222-900f-042b36e59e04][Keybinds]]

**** org-refile
By default org-refile only shows the 1st level headings from the current file.
This will make it show two levels of headings from all agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))))
#+END_SRC

***** TODO Set org-refile targets based on current file
Why would I want to refile something work-related under Softwares etc.

**** org-wunderlist
:PROPERTIES:
:CUSTOM_ID: h:202b2abd-5930-4e3c-af09-dea245e2da28
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-wunderlist
    :disabled
    :init (setq org-wunderlist-file (concat org-directory "Personal/Wunderlist.org")
                org-wunderlist-dir  (concat user-emacs-directory "tmp/org-wunderlist/")))
#+END_SRC

Client-ID and Token stored in private.el

**** org-ac
:PROPERTIES:
:CUSTOM_ID: h:310f0fc4-224e-4c70-bdde-c65a695a6b25
:END:
Autocomplete sources for org mode

#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :init
    (require 'org-ac)
    (org-ac/config-default))
#+END_SRC

**** org-capture
:PROPERTIES:
:CUSTOM_ID: h:b24cb628-f225-4d2e-97a0-2d72ed5e3c88
:END:

Show hierarchical headlines when refiling instead of flattening it out
Show all the hierarchical headlines instead of having to step down them
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

From [[http://cestlaz.github.io/posts/using-emacs-23-capture-1][Using Emacs 23 - Capture 1]] and [[http://cestlaz.github.io/posts/using-emacs-24-capture-2][Using Emacs 24 - Capture 2]]
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("T" "TODO" entry
           (file+headline org-default-notes-file "Inbox")
           "* TODO %^{Task}%(org-set-property \"CAPTURED\" \"%U\")\n\n%?"
           :jump-to-captured t)

          ("s"  "Snippets of code")

          ("se" "Emacs" entry
           (file (concat org-directory "Software/emacs.org"))
           :jump-to-captured t)

          ("ss" "Shell" entry
           (file (concat org-directory "Software/shell.org"))
           :jump-to-captured t)

          ("sv" "Vim" entry
           (file (concat org-directory "Software/vim.org"))
           :jump-to-captured t)))
#+END_SRC

NOTE: When using several keys, keys using the same prefix key must be sequential in the list and preceded by a 2-element entry explaining the prefix key.
[[http://orgmode.org/manual/Template-elements.html#Template-elements][Template elements]], [[http://orgmode.org/manual/Template-elements.html#Template-expansion][Template expansion]]

We use this to create frames for org-capture directly from the OS as shown [[http://cestlaz.github.io/posts/using-emacs-24-capture-2/][here]].
#+BEGIN_SRC emacs-lisp
  (use-package noflet)

  (defun my/make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
            (org-capture)))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
#+END_SRC

***** TODO Split org-capture-templates and move work related stuff to a separate file
**** org-id
:PROPERTIES:
:CUSTOM_ID: h:8a9fa520-31a7-49fb-a85c-18ea5d215b7a
:END:
Copied from [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][here]].
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-id)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
    :init
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

    :config
    (defun my/org-custom-id-get (&optional pom create prefix)
      "Get the CUSTOM_ID property of the entry at point-or-marker POM.
       If POM is nil, refer to the entry at point. If the entry does
       not have an CUSTOM_ID, the function returns nil. However, when
       CREATE is non nil, create a CUSTOM_ID if none is present
       already. PREFIX will be passed through to `org-id-new'. In any
       case, the CUSTOM_ID of the entry is returned."
      (interactive)
      (org-with-point-at pom
        (let ((id (org-entry-get nil "CUSTOM_ID")))
          (cond
           ((and id (stringp id) (string-match "\\S-" id))
            id)
           (create
            (setq id (org-id-new (concat prefix "h")))
            (org-entry-put pom "CUSTOM_ID" id)
            (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
            id)))))

    (defun my/org-add-ids-to-headlines-in-file ()
      "Add CUSTOM_ID properties to all headlines in the current
       file which do not already have one. Only adds ids if the
       `auto-id' option is set to `t' in the file somewhere. ie,
       ,#+OPTIONS: auto-id:t"
      (interactive)
      (save-excursion
        (widen)
        (goto-char (point-min))
        (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
          (org-map-entries (lambda () (my/org-custom-id-get (point) 'create))))))

    ;; Automatically add ids to saved org-mode headlines
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          (lambda ()
                            (when (and (eq major-mode 'org-mode)
                                       (eq buffer-read-only nil))
                              (my/org-add-ids-to-headlines-in-file)))))))
#+END_SRC

**** htmlize
:PROPERTIES:
:CUSTOM_ID: h:405b1fd9-9626-4ede-9a40-fc6751824215
:END:
Syntax highlighting when exporting to HTML? Yes, please!
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :disabled)
#+END_SRC

*** Keybinds
:PROPERTIES:
:CUSTOM_ID: h:7c86a221-7ef3-4222-900f-042b36e59e04
:END:

Custom keymap for org-mode bindings
#+BEGIN_SRC emacs-lisp
  (bind-keys  :prefix-map my-org-bindings-map
              :prefix-docstring "This map is used to group together all org-mode settings"
              :prefix "C-c o"
              ("a" . org-agenda)
              ("c" . org-capture))
  ;; :bind (("c" . calendar))
#+END_SRC

Note that these are still part of the /:config/ block
#+BEGIN_SRC emacs-lisp
  (bind-keys :map helm-command-map
             ("o" . helm-org-in-buffer-headings)
             ("h" . helm-info-org))
#+end_src

Delete the result block using =C-c C-v k= where =C-c C-v= is the /org-babel-key-prefix/
#+begin_src emacs-lisp
  :bind (:map     org-babel-map
         ("k"   . org-babel-remove-result)
         ("C-k" . org-babel-remove-result))
#+end_src

*** use-package END
:PROPERTIES:
:CUSTOM_ID: h:999d1b03-8721-4788-9a3f-5d491fe14d1b
:END:
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

*** TODO Diminish org-indent-mode
:PROPERTIES:
:CUSTOM_ID: h:3196d20c-4df7-4216-b723-bbe34846310c
:END:

** projectile
:PROPERTIES:
:CUSTOM_ID: h:dc7b9f0f-01eb-466d-a0b2-381de4cfad33
:END:
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (setq projectile-enable-caching t)
    (setq projectile-completion-system 'helm)
    :config
    (add-to-list 'projectile-other-file-alist '("cc" "h")) ; .cc -> .h
    (add-to-list 'projectile-other-file-alist '("h" "cc")) ; .h -> .cc
    (projectile-global-mode)
#+END_SRC

*** Keybinds
:PROPERTIES:
:header-args: :tangle no
:CUSTOM_ID: h:069023a5-d864-4c6f-88ec-4ac2920a8c24
:END:

Unbind the default prefix. Explained [[https://github.com/bbatsov/projectile/issues/991#issuecomment-248026667][here.]]
#+BEGIN_SRC emacs-lisp
  (define-key projectile-mode-map projectile-keymap-prefix nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :bind (("C-x p" . projectile-keymap-prefix)
         :map       projectile-command-map)
#+END_SRC

*** use-package END
:PROPERTIES:
:CUSTOM_ID: h:16947e3b-9ac4-49e5-8acf-f4a66e9ea72b
:END:
#+BEGIN_SRC emacs-lisp
  )
#+END_SRC

*** TODO Set .x.v as other file for .x
:PROPERTIES:
:CUSTOM_ID: h:43711a5f-6ae9-4556-b82f-c4e28e7e4437
:END:
This requires including $STEM/build/lv/ch/rtl in .projectile and ignoring .x
Might need to re-index every time a model is built?

** TODO SLIME
:PROPERTIES:
:CUSTOM_ID: h:a39d7830-f2ca-4e68-912e-d5b0b4d7a00f
:END:
** undo-tree
:PROPERTIES:
:CUSTOM_ID: h:778dabd6-a00e-4128-bbd0-075bfa99acb6
:END:
This lets us visually walk through the changes we've made, undo back to a certain point (or redo), and go down different branches.
Default binding is =C-x u=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :commands (undo-tree-visualize)
    :config
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t))
#+END_SRC

** yasnippet
:PROPERTIES:
:CUSTOM_ID: h:7ab0398e-ac05-4e77-baa9-6b9f5965779b
:END:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :disabled
    :diminish yas-minor-mode
    :init (yas-global-mode t))
#+END_SRC

** which-key
:PROPERTIES:
:CUSTOM_ID: h:089bdfc4-998f-47c1-aa9d-8ace956067ba
:END:
Shows which keys can be pressed next. Eg. if you press =C-x= and wait a few seconds, a window pops up with all the key bindings following the currently entered incomplete command.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config  (which-key-mode))
#+END_SRC

** ace-window
:PROPERTIES:
:CUSTOM_ID: h:6598a046-2a58-4018-9e8a-5e6ccdfca8bf
:END:
When more than 2 windows are open, show a number to jump in each window to jump directly to.
Similar to Tmux's =<prefix> C-g=
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (setq aw-background t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j? ?k? ?l))
    :config
    (set-face-attribute 'aw-leading-char-face nil :foreground "red" :height 2.5)
    :bind ("C-x o" . ace-window))
#+END_SRC

Note that we're rebinding =C-x o=

** avy
:PROPERTIES:
:CUSTOM_ID: h:3047e81a-de30-44a1-9d00-08124ddaa60a
:END:
Similar to vim's easy-motion plugin
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (:map evil-normal-state-map
                ("g s" . avy-goto-char)))
#+END_SRC

** TODO evil-snipe
:PROPERTIES:
:CUSTOM_ID: h:fa2a6cb1-77a9-4cd0-b77f-aa5ce3e47c33
:END:
Replaces avy

** TODO auto-complete
:PROPERTIES:
:CUSTOM_ID: h:d49ac609-f845-47a7-a404-2dbdfc80b944
:END:
Completion doesn't work if evil is installed

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :init
    (progn (ac-config-default)
           (global-auto-complete-mode t)))
#+END_SRC

** TODO company-mode
:PROPERTIES:
:CUSTOM_ID: h:412d45f5-0675-4401-bfe9-e8b64da3935a
:END:
Autocompletion
Reduce delay and ensure that the popup shows up only if the last command has been an editing command.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :disabled
    :diminish company-mode
    :init (setq company-idle-delay 0.25
                company-begin-commands '(self-insert-command))
#+end_src

*** :config
:PROPERTIES:
:CUSTOM_ID: h:5a874015-7a14-49de-9bbc-33b30d46b9a0
:END:
#+BEGIN_SRC emacs-lisp
  :config (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Enter by default triggers the completion. This is not what I want. Sometimes I just mean Enter.
This will complete the selection only if I have explicitly interacted with Company. Taken from [[http://emacs.stackexchange.com/a/24800/9690][here]].
#+BEGIN_SRC emacs-lisp
  (defun my/company-active-return ()
    "Complete the current selection, but only if the user has interacted explicitly with Company."
    (interactive)
    (if (company-explicit-action-p)
        (company-complete)
      (call-interactively
       (or (key-binding (this-command-keys))
           (key-binding (kbd "RET"))))))

  (bind-key "<return>" #'my/company-active-return company-active-map)
  (bind-key "RET"      #'my/company-active-return company-active-map)
#+END_SRC

**** TODO Completion for Org
:PROPERTIES:
:CUSTOM_ID: h:ec8e5f87-b26c-4f66-ac27-1053c2424ad9
:END:
http://orgmode.org/manual/Completion.html
http://emacs.stackexchange.com/a/21173/9690

*** END
:PROPERTIES:
:CUSTOM_ID: h:b47a5f34-0374-4366-bf82-d33c0b9ced0e
:END:
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

** rainbow-mode
:PROPERTIES:
:CUSTOM_ID: h:bed217fa-07e0-4770-a3eb-851828336439
:END:
When a color is specified as a hex code or with its name, set the background of the face to the value of the color itself
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC

Provides command =rainbow-mode= to toggle this

** rainbow-delimiters
:PROPERTIES:
:CUSTOM_ID: h:691336d0-e3ba-4d5b-b19f-1704c8c9e47f
:END:
Use brighter colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (progn
      (set-face-attribute 'rainbow-delimiters-depth-1-face nil :foreground "dark orange")
      (set-face-attribute 'rainbow-delimiters-depth-2-face nil :foreground "deep pink")
      (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "chartreuse")
      (set-face-attribute 'rainbow-delimiters-depth-4-face nil :foreground "deep sky blue")
      (set-face-attribute 'rainbow-delimiters-depth-5-face nil :foreground "yellow")
      (set-face-attribute 'rainbow-delimiters-depth-6-face nil :foreground "orchid")
      (set-face-attribute 'rainbow-delimiters-depth-7-face nil :foreground "spring green")
      (set-face-attribute 'rainbow-delimiters-depth-8-face nil :foreground "sienna1"))

    :bind (:map emacs-unimpaired-toggle-map ("r" . rainbow-delimiters-mode)))
#+END_SRC

*** TODO Find Better colors for leuven theme
:PROPERTIES:
:CUSTOM_ID: h:8a9e4f3c-6c59-459a-aa7e-206e8d0b1e82
:END:

** verilog-mode
:PROPERTIES:
:CUSTOM_ID: h:c291889f-581d-4f79-997c-34b92411a11f
:END:
#+BEGIN_SRC emacs-lisp
  (use-package verilog-mode
    :load-path "bundle/verilog-mode"
    :mode (("\\.v\\'"    . verilog-mode)
           ("\\.svh?\\'" . verilog-mode)
           ("\\.x\\'"    . verilog-mode))
    :config
    (font-lock-mode 1))
#+END_SRC

** vimish-fold
:PROPERTIES:
:CUSTOM_ID: h:ba80b90d-9d21-49a7-8581-e389855954db
:END:
#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :disabled
#+END_SRC

*** :config
:PROPERTIES:
:CUSTOM_ID: h:387234a6-d37b-4005-9f36-3f6f82ecd626
:END:
#+BEGIN_SRC emacs-lisp
  :config
  (vimish-fold-global-mode 1)
#+END_SRC

**** evil-vimish-mode
:PROPERTIES:
:CUSTOM_ID: h:4f6c517b-426d-45be-a2be-fd0991b5c629
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-vimish-fold
    :config
    (evil-vimish-fold-mode 1))
#+END_SRC

*** END
:PROPERTIES:
:CUSTOM_ID: h:09e1ddb0-83a0-40d1-a09a-52f8cc7bf1e8
:END:
#+BEGIN_SRC emacs-lisp
  )
#+END_SRC

** monokai-theme
:PROPERTIES:
:CUSTOM_ID: h:d0f68afa-4eb8-4d92-b734-28f545165342
:END:
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :disabled
    :config
    ;; (setq monokai-use-variable-pitch nil
    ;;       monokai-height-minus-1     1.0
    ;;       monokai-height-plus-1      1.0
    ;;       monokai-height-plus-2      1.0
    ;;       monokai-height-plus-3      1.0
    ;;       monokai-height-plus-4      1.0)
    (load-theme 'monokai t))
#+END_SRC

** solarized-theme
:PROPERTIES:
:CUSTOM_ID: h:f78dde22-b0a4-41d8-81bd-ac2f0438f379
:END:
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :disabled
    :config
    ;; (setq solarized-use-variable-pitch nil
    ;;       solarized-height-minus-1     1.0
    ;;       solarized-height-plus-1      1.0
    ;;       solarized-height-plus-2      1.0
    ;;       solarized-height-plus-3      1.0
    ;;       solarized-height-plus-4      1.0)
    (setq solarized-use-less-bold t)
    ;; (set-face-attribute 'linum-relative-current-face nil :foreground "#D33682")

    (setq evil-normal-state-cursor   '("#719e07" box)
          evil-visual-state-cursor   '("#b58900" box)
          evil-insert-state-cursor   '("#268bd2" bar)
          evil-replace-state-cursor  '("#dc322f" bar)
          evil-operator-state-cursor '("#dc322f" hollow)
          evil-emacs-state-cursor    '("white"   box))

    (load-theme 'solarized-light t))
#+END_SRC

** leuven-theme
:PROPERTIES:
:CUSTOM_ID: h:469b4ba5-b4e9-4c23-bc57-5ef1ca1219e5
:END:
[[https://github.com/fniessen/emacs-leuven-theme][Github Link]]
#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    ;; :disabled
    :config
    (load-theme 'leuven t)

    (setq evil-normal-state-cursor   '("#008000" box)
          evil-visual-state-cursor   '("#006FE0" box)
          evil-insert-state-cursor   '("#0000FF" bar)
          evil-replace-state-cursor  '("#D0372D" bar)
          evil-operator-state-cursor '("#D0372D" hollow)
          evil-emacs-state-cursor    '("white"   box))

    (set-face-attribute 'org-agenda-date         nil :height 1.4)
    (set-face-attribute 'org-agenda-date-today   nil :height 1.4)
    (set-face-attribute 'org-agenda-date-weekend nil :height 1.4)
    (set-face-attribute 'trailing-whitespace     nil :background "#DDDDFF"))
#+END_SRC

Load theme first and then override the colors

* After
:PROPERTIES:
:CUSTOM_ID: h:da43a0c0-246b-4bb4-b64b-643cb405482f
:END:
** Private config
:PROPERTIES:
:CUSTOM_ID: h:4bb131e7-7688-4fd7-8d15-e2f267006d37
:END:
#+BEGIN_SRC emacs-lisp
  (load (concat user-emacs-directory "private.el") t)
#+END_SRC

** TODO After theme
:PROPERTIES:
:CUSTOM_ID: h:fec112a6-4b7b-4d6f-8e0c-96109e23c176
:END:
Set the background of the line number column to match that of the modeline
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'linum nil :font my-monospaced-font :background (face-attribute 'mode-line :background nil t) :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal)
  ;; (set-face-attribute 'linum-relative-current-face nil :inherit 'linum :weight 'bold :background (face-attribute 'linum :background nil t))
#+END_SRC

* ToDo Items
:PROPERTIES:
:CUSTOM_ID: h:22f01c76-e2de-4a52-83e2-958de541430e
:END:
** DONE Add CUSTOM_ID property to all headings
CLOSED: [2017-01-05 Thu 19:21]
:PROPERTIES:
:CUSTOM_ID: h:93a4e44c-9ef9-41cc-b82e-4f5d407efde7
:END:
CUSTOM_ID value is the full hierarchical path to the section heading eg. =org*org-capture=
[[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Autogenerating CUSTOM_IDs]]
