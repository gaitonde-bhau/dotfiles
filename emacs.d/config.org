#+TITLE: Emacs Configuration

* Init
** Archives
#+BEGIN_SRC emacs-lisp
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.milkbox.net/packages/")
                 '("org"   . "http://orgmode.org/elpa/")))

  (package-initialize)
#+END_SRC

** use-package
[[https://www.youtube.com/watch?v%3D2TSKxxYEbII][use-package video tutorial]]

Install and load use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (defvar use-package-verbose t)
    (require 'use-package)
    (require 'bind-key)
    (setq use-package-always-ensure t))

  (bind-key "C-h B" 'describe-personal-keybindings)
#+END_SRC

** TODO Check if there's a way to keep all the config in this file itself with init.el being empty
Sacha Chua seems to have something like that. Her init.el is simply a link. 
Maybe some information in this [[https://www.reddit.com/r/emacs/comments/4uo9r0/shaving_time_on_emacs_startup_from_org_literate/][reddit thread]].

* Visual
#+BEGIN_SRC emacs-lisp
  ;; Disable anoying beep
  (setq ring-bell-function 'ignore)

  ;; Improve rendering performance
  (setq redisplay-dont-pause t)

  ;; Display a special glyph in the fringe of each empty line at the end of the buffer
  (setq indicate-empty-lines t)

  ;; Undo and Redo windows <= Wut?
  ;; (winner-mode 1)
#+END_SRC

** Frame related
Set size of default frame
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist
        '((top    . 0)
          (left   . 0)
          (width  . 271)
          (height . 70)))
#+END_SRC

Start maximized
#+BEGIN_SRC emacs-lisp
  ;; Open in fullscreen
  (defun my/switch-fullscreen nil
    "Switch to fullscreen. Works in OSX."
    (interactive)
    (let* ((modes '(nil fullboth fullwidth fullheight))
           (cm (cdr (assoc 'fullscreen (frame-parameters))))
           (next (cadr (member cm modes))))
      (modify-frame-parameters
       (selected-frame)
       (list (cons 'fullscreen next)))))
  ;; (my/switch-fullscreen)

  ;; Start maximized
  ;; (custom-set-variables '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Transparency
#+BEGIN_SRC emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(85 85))
  ;; (add-to-list 'default-frame-alist '(alpha 85 85))
#+END_SRC

Avoid Emacs hanging for a while after changing default font:
#+BEGIN_SRC emacs-lisp
(modify-frame-parameters nil '((wait-for-wm . nil)))
#+END_SRC

** Clean-up
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (when window-system
    ;; (menu-bar-mode -1)
    ;; (tooltip-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
#+END_SRC

We can also put something like this into =~/.Xresources= to enable/disable certain things as soon as Emacs starts
#+BEGIN_EXAMPLE
Emacs.verticalScrollBars: off
Emacs.toolBar: off
#+END_EXAMPLE

** Mode line
#+BEGIN_SRC emacs-lisp
  ;; Show column number in bottom bar
  (setq column-number-mode t)
#+END_SRC

* General
** Custom file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+END_SRC

** Backup
#+BEGIN_SRC emacs-lisp
  (defvar backup-directory (concat user-emacs-directory "/tmp/backups"))
  (if (not (file-exists-p backup-directory)) (make-directory backup-directory t))
  (setq backup-directory-alist `(("." . ,backup-directory)))
  (setq make-backup-files         t)  ; backup of a file the first time it is saved.
  (setq backup-by-copying         t)  ; don't clobber symlinks
  (setq version-control           t)  ; version numbers for backup files
  (setq delete-old-versions       t)  ; delete excess backup files silently
  (setq delete-by-moving-to-trash t)
  (setq kept-old-versions         6)  ; oldest versions to keep when a new numbered backup is made (default: 2)
  (setq kept-new-versions         9)  ; newest versions to keep when a new numbered backup is made (default: 2)
#+END_SRC

** Autosave
#+BEGIN_SRC emacs-lisp
  (defvar autosave-directory (concat user-emacs-directory "/tmp/autosaves"))
  (if (not (file-exists-p autosave-directory)) (make-directory autosave-directory t))
  (setq auto-save-file-name-transforms `(("." ,autosave-directory t)))
  (setq auto-save-default t)  ; auto-save every buffer that visits a file
#+END_SRC

** History
Delete identical history entries
#+BEGIN_SRC emacs-lisp
(setq history-delete-duplicates t)
#+END_SRC

Save mini-buffer history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (setq savehist-file (concat user-emacs-directory "tmp/history.el")
          history-length 100)
    :config
    (savehist-mode t))
#+END_SRC

** UTF-8 Please
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system   'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-language-environment    "UTF-8")
  (prefer-coding-system        'utf-8)
#+END_SRC

** Fonts
One way to select from multiple fonts
#+BEGIN_SRC emacs-lisp
  (defun my/font-exist-p (font)
    " Check if font exists"
    (if (null (x-list-fonts font)) nil t))

  (when (eq system-type 'gnu/linux)
    (when (my/font-exist-p "MesloLGMDZ Nerd Font")
      (setq my-variable-pitch-font "MesloLGMDZ Nerd Font-10"
            my-monospaced-font     "MesloLGMDZ Nerd Font-10"))

    (when (my/font-exist-p "Pragmata Pro")      (setq my-variable-pitch-font "Pragmata Pro-10"))
    (when (my/font-exist-p "Pragmata Pro Mono") (setq my-monospaced-font     "Pragmata Pro Mono-10")))

  (when (eq system-type 'windows-nt)
    (when (my/font-exist-p "Consolas")
      (setq my-variable-pitch-font "Consolas-10"
            my-monospaced-font     "Consolas-10")))

  (set-face-attribute 'default        nil :font my-variable-pitch-font)
  (set-face-attribute 'fixed-pitch    nil :font my-monospaced-font)
  (set-face-attribute 'variable-pitch nil :font my-variable-pitch-font)
#+END_SRC

Fall back to DejaVu Sans when the font lacks support for some glyphs. Taken from [[https://github.com/joodie/emacs-literal-config/blob/c66e30ce961b140dd3e84116f4d45cbc19d0d944/emacs.org#font][github:joodie]]
#+BEGIN_SRC emacs-lisp
  (when (functionp 'set-fontset-font)
    (set-fontset-font "fontset-default" 'unicode
                      (font-spec :family "DejaVu Sans Mono"
                                 :width 'normal
                                 :size 11
                                 :weight 'normal)))
#+END_SRC

Increase/Decrease font size using =C-x C-+= and =C-x C--=. =C-x C-0= resets it

*** TODO Figure out how to specify fall-back fonts
To be able to use different fonts on different machines
** Tabs, Indentation and Spacing
Use only spaces and no tabs
#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    (setq show-trailing-whitespace t)

    (defun my/toggle-trailing-whitespace ()
      (interactive)  ; Allows to be called as a command via M-x
      (setq show-trailing-whitespace (not show-trailing-whitespace)))

    ;; (bind-key "RET" 'newline-and-indent)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  ;; (global-hl-line-mode 1)
  (bind-key "C-c o c" 'global-hl-line-mode)
#+END_SRC

** Simpler y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Matching Parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  ;; (setq show-paren-style 'expression)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  ;; Count 1 space after a period as the end of a sentence, instead of 2
  (setq sentence-end-double-space nil)

  ;; Enable editing by visual lines
  (global-visual-line-mode t)
  (diminish 'visual-line-mode)

  ;; Let emacs react faster to keystrokes
  (setq echo-keystrokes 0.1)
  (setq idle-update-delay 0.35)

  ;; Jump to the help window when it's opened. 
  ;; Press q to close it and restore the view to the previous buffer
  (setq help-window-select t)
#+END_SRC

** TODO Emacs server
- Always start the emacs-server, except when run in daemon mode
- Already Disable prompt asking you if you want to kill a buffer with a live process attached to it.
  http://stackoverflow.com/questions/268088/how-to-remove-the-prompt-for-killing-emacsclient-buffers

#+BEGIN_SRC emacs-lisp
  (use-package server
    :disabled
    :config
    (unless (or (daemonp) (server-running-p))
      (server-mode 1))
    (add-hook 'server-switch-hook 'raise-frame))
#+END_SRC

Alias for emacsclient:
#+BEGIN_EXAMPLE
alias e="emacsclient --no-wait --alternate-editor=\"\" --create-frame"
#+END_EXAMPLE

* Packages
** evil
evil can be toggled using =C-z=

#+BEGIN_SRC emacs-lisp
  (use-package evil
    ;; :disabled
#+END_SRC

*** :init
#+BEGIN_SRC emacs-lisp
  :init
  (evil-mode t)
#+END_SRC

**** Color the cursor to indicate the Evil mode. White to indicate that we've switched back to Emacs
#+BEGIN_SRC emacs-lisp
  (setq evil-normal-state-cursor   '("#719e07" box)
        evil-visual-state-cursor   '("#b58900" box)
        evil-insert-state-cursor   '("#268bd2" bar)
        evil-replace-state-cursor  '("#dc322f" bar)
        evil-operator-state-cursor '("#dc322f" hollow)
        evil-emacs-state-cursor    '("white"   box))
#+END_SRC

*** :config
#+BEGIN_SRC emacs-lisp
  :config
#+END_SRC

**** evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :diminish evil-commentary-mode
    :config (evil-commentary-mode))
#+END_SRC

**** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config (global-evil-surround-mode))
#+END_SRC

**** evil-visualstar
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :config (global-evil-visualstar-mode))
#+END_SRC

**** evil-exchange
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :config (evil-exchange-cx-install))
#+END_SRC

**** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader)
#+END_SRC

**** evil-matchit
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit)
#+END_SRC

**** evil-numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers)
#+END_SRC

**** Make escape quit everything, whenever possible.
#+BEGIN_SRC emacs-lisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
          In Delete Selection mode, if the mark is active, just deactivate it;
          then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  (bind-key [escape] 'keyboard-quit            evil-normal-state-map          )
  (bind-key [escape] 'keyboard-quit            evil-visual-state-map          )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-map           )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-ns-map        )
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-completion-map)
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-must-match-map)
  (bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-isearch-map   )
#+END_SRC

*** END
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

** TODO flycheck
** helm
[[http://tuhdo.github.io/helm-intro.html][Introduction to Helm by reddit:/u/tuhdo]]

#+BEGIN_SRC emacs-lisp
  (use-package helm
    ;; :disabled
    :diminish helm-mode
#+END_SRC

*** :init
#+BEGIN_SRC emacs-lisp
  :init
  (require 'helm-config)

  (setq helm-quick-update                     t   )
  (setq helm-idle-delay                       0.0 )
  (setq helm-input-idle-delay                 0.01)
  (setq helm-split-window-in-side-p           t   )  ; open helm buffer inside current window, not occupy whole other window
  (setq helm-move-to-line-cycle-in-source     t   )  ; move to end or beginning of source when reaching top or bottom of source
  (setq helm-display-header-line              nil )  ; Disable the header

  (setq helm-mode-fuzzy-match                 t   )
  (setq helm-apropos-fuzzy-match              t   )
  (setq helm-buffers-fuzzy-matching           t   )
  (setq helm-completion-in-region-fuzzy-match t   )
  (setq helm-lisp-fuzzy-completion            t   )
  (setq helm-locate-fuzzy-match               t   )
  (setq helm-recentf-fuzzy-match              t   )
  (setq helm-M-x-fuzzy-match                  t   )

  (helm-mode t)
  (helm-autoresize-mode t)
  (semantic-mode t)
#+END_SRC

*** :config
Remove the default prefix =C-x c=. New one will be created in :bind
#+BEGIN_SRC emacs-lisp
  :config
  (unbind-key "C-x c")
#+END_SRC

**** Remove sub-headers line if only a single source; keep them for multiple sources
#+BEGIN_SRC emacs-lisp
  (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
  (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
  (defvar helm-source-header-default-box        (face-attribute 'helm-source-header :box))

  (defun helm-toggle-header-line ()
    (if (> (length helm-sources) 1)
        (set-face-attribute 'helm-source-header nil
                            :foreground helm-source-header-default-foreground
                            :background helm-source-header-default-background
                            :box helm-source-header-default-box
                            :height 1.0)
      (set-face-attribute 'helm-source-header nil
                          :foreground (face-attribute 'helm-selection :background)
                          :background (face-attribute 'helm-selection :background)
                          :box nil
                          :height 0.1)))
  (add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)
#+END_SRC

**** helm-descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :init (helm-descbinds-mode t))
#+END_SRC

Note that helm-descbinds will replace the default /describe-bindings/.
Thus =C-h b= can be used for it; no need to create a new binding.

*** :bind
This allows us to create new custom bindings within helm's default map thereby allowing us to use the default keybindings as well
We redefine /helm-command-prefix/ here
#+BEGIN_SRC emacs-lisp
  :bind (("C-c h" . helm-command-prefix)
         :map       helm-command-map
         ("b"     . helm-buffers-list)
         ("e"     . helm-find-files)    ; Find files in the current directory
         ("m"     . helm-mini)          ; m-mixed
         ("/"     . helm-occur))        ; search in all open buffers
  :bind* ("M-x"   . helm-M-x)
#+END_SRC

Other useful default keybinds:
|--------------+------------------------+--------------------------------------------------------------|
| <prefix> a   | helm-apropos           | Unholy amalgam of describe-function, variable, commands etc. |
| <prefix> i   | helm-semantic-or-imenu | Show outline and major definitions                           |
| <prefix> r   | helm-regexp            | Construct a regexp                                           |
| <prefix> C-, | helm-calcul-expression | Interface to calc command                                    |
|--------------+------------------------+--------------------------------------------------------------|

*** use-package END
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

** linum-relative
Relative line-numbers ala vim
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :disabled
    :diminish linum-relative-mode
    :init
    (setq linum-relative-current-symbol "")
    (linum-relative-global-mode t))
#+END_SRC

*** TODO Figure out why it's necessary to explicitly specify :background for 'linum-relative-current-face
Shouldn't it inherit from 'linum?

*** TODO Fix ugly gaps in linum-face when lines wrap. [[http://emacs.stackexchange.com/a/897/9690][StackExchange Discussion]]
#+BEGIN_SRC emacs-lisp
  (defvar my-linum-gapless-margin-display
    `((margin left-margin) ,(propertize "     " 'face 'linum))
    "String used on the margin.")

  (defvar-local my-linum-gapless-margin-overlays nil
    "List of overlays in current buffer.")

  (defun my-linum-gapless-make-overlay-at (p)
    "Create a margin overlay at position P."
    (push (make-overlay p (1+ p)) my-linum-gapless-margin-overlays)
    (overlay-put
     (car my-linum-gapless-margin-overlays) 'before-string
     (propertize " "  'display my-linum-gapless-margin-display)))

  (defun my-linum-gapless-setup-margin-overlays ()
    "Put overlays on each line which is visually wrapped."
    (interactive)
    (let ((ww (- (window-width)
                 (if (= 0 (or (cdr fringe-mode) 1)) 1 0)))
          ov)
      (mapc #'delete-overlay my-linum-gapless-margin-overlays)
      (save-excursion
        (goto-char (point-min))
        (while (null (eobp))
          ;; On each logical line
          (forward-line 1)
          (save-excursion
            (forward-char -1)
            ;; Check if it has multiple visual lines.
            (while (>= (current-column) ww)
              (my-linum-gapless-make-overlay-at (point))
              (forward-char (- ww))))))))

  ;; (add-hook 'linum-before-numbering-hook #'my-linum-gapless-setup-margin-overlays)
#+END_SRC

** macrostep
Expand a macro and enter macrostep-mode by pressing /C-c m e/.
Once in macrostep-mode, press /e/ to expand, /c/ to collapse and /q/ to quit

#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :disabled
    :bind ("C-c m e" . macrostep-expand))
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
#+END_SRC

*** :init
#+BEGIN_SRC emacs-lisp
  :init
#+END_SRC

**** Misc
#+BEGIN_SRC emacs-lisp
  (setq org-indent-mode t)

  (setq org-directory "~/Notes/")
  (setq org-default-notes-file (concat org-directory "organizer.org"))
  (setq org-agenda-files (quote ("~/Notes/AMD"
                                 "~/Notes/Software")))

  (setq org-M-RET-may-split-line '((item) (default . t)))
  (setq org-log-done 'time) ; 'time/'note
  ;; (setq org-special-ctrl-a/e t)
  ;; (setq org-return-follows-link nil)
  (setq org-use-speed-commands nil)
  ;; (setq org-speed-commands-user nil)
  (setq org-startup-align-all-tables nil)
  ;; (setq org-log-into-drawer nil)
  (setq org-tags-column 1)
  (setq org-hide-emphasis-markers t)  ; Hide markers for bold/italics etc.
  ;; (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  ;; (setq org-completion-use-ido t)
  ;; (setq org-startup-truncated nil)
  (setq org-link-search-must-match-exact-headline nil)
#+END_SRC

**** Org babel source blocks
Enable syntax highlighting within the source blocks and keep the editing popup window within the same window.
Also, strip leading and trailing empty lines if any.
/org-src-preserve-indentation/ will not add an extra level of indentation to the source code
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively                       t
        org-src-window-setup                           'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        ;; org-src-preserve-indentation                t
        org-src-tab-acts-natively                      t)
#+end_src

Languages which can be evaluated in Org-mode buffers.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((python     . t)
                                         (ruby       . t)
                                         (perl       . t)
                                         (sh         . t))))
#+end_src

Ask for confirmation before evaluating? NO!
#+begin_src emacs-lisp
  (defun my/org-babel-evaluate-silent (lang body)
    "Do not ask for confirmation to evaluate these languages."
    (not (or (string= lang "emacs-lisp"))))

  ;; (setq org-confirm-babel-evaluate 'my/org-babel-evaluate-silent)
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

**** Clean View
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-hide-leading-stars t)
  (setq org-odd-level-only nil)

  ;; …▼•
  (setq org-ellipsis " ▼" )              ; Use a fancy arrow to indicate a fold instead of '...'
#+END_SRC

**** ToDo States
Custom keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCEL(c)")))
#+END_SRC

*** :config
#+BEGIN_SRC emacs-lisp
  :config
  (eval-after-load 'org-indent '(diminish org-indent-mode))
#+END_SRC

**** Templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sl" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n" "<src lang=\"?\">\n\n</src>"))
#+END_SRC

**** Fonts
Variable pitch for non-code text
#+BEGIN_SRC emacs-lisp
  (defun my/set-buffer-variable-pitch ()
    (interactive)
    (variable-pitch-mode t)
    (setq line-spacing 3)
    (set-face-attribute 'org-table            nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code             nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block            nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-background nil :inherit 'fixed-pitch))

  (add-hook 'org-mode-hook      'my/set-buffer-variable-pitch)
  (add-hook 'eww-mode-hook      'my/set-buffer-variable-pitch)
  (add-hook 'markdown-mode-hook 'my/set-buffer-variable-pitch)
  (add-hook 'Info-mode-hook     'my/set-buffer-variable-pitch)
#+END_SRC

**** Delete links
#+BEGIN_SRC emacs-lisp
  (defun my/org-replace-link-with-description ()
    "Replace an org link with its description. If a description doesn't exist, replace with its address"
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description))))
#+END_SRC

**** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    ;; :disable
    :init   (setq org-bullets-bullet-list '("•"))
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** :bind
Delete the result block using =C-c C-v k= where =C-c C-v= is the /org-babel-key-prefix/
#+BEGIN_SRC emacs-lisp
  :bind (:map     org-babel-map
         ("k"   . org-babel-remove-result)
         ("C-k" . org-babel-remove-result))
#+END_SRC

*** use-package END
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

*** TODO Always use leuven for org-mode
#+BEGIN_SRC emacs-lisp
  (defun org-mode-theme-hook ()
    ;; do something here if use-package is deferred?
    (load-theme 'leuven t))

  ;; (add-hook 'org-mode-hook 'org-mode-theme-hook)
#+END_SRC

*** TODO Diminish org-indent-mode
** TODO projectile
** TODO SLIME
** undo-tree
This lets us visually walk through the changes we've made, undo back to a certain point (or redo), and go down different branches.
Default binding is =C-x u=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :commands (undo-tree-visualize)
    :config
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t))
#+END_SRC

** TODO yasnippet
** Themes
*** Theme Directories
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "/themes"))
  (add-to-list 'load-path (concat user-emacs-directory "/themes"))
#+END_SRC

*** monokai
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :disabled
    :config
    ;; (setq monokai-use-variable-pitch nil
    ;;       monokai-height-minus-1     1.0
    ;;       monokai-height-plus-1      1.0
    ;;       monokai-height-plus-2      1.0
    ;;       monokai-height-plus-3      1.0
    ;;       monokai-height-plus-4      1.0)
    (load-theme 'monokai t))
#+END_SRC

*** solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :disabled
    :config
    ;; (setq solarized-use-variable-pitch nil
    ;;       solarized-height-minus-1     1.0
    ;;       solarized-height-plus-1      1.0
    ;;       solarized-height-plus-2      1.0
    ;;       solarized-height-plus-3      1.0
    ;;       solarized-height-plus-4      1.0)
    (setq solarized-use-less-bold t)
    ;; (set-face-attribute 'linum-relative-current-face nil :foreground "#D33682")
    (load-theme 'solarized-light t))
#+END_SRC

*** leuven
[[https://github.com/fniessen/emacs-leuven-theme][Github Link]]
#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    ;; :disabled
    :config
    (load-theme 'leuven t))
#+END_SRC

*** After theme
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'linum nil :font my-monospaced-font :background (face-attribute 'mode-line :background nil t) :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal)
  ;; (set-face-attribute 'linum-relative-current-face nil :inherit 'linum :weight 'bold :background (face-attribute 'linum :background nil t))
#+END_SRC

**** TODO Adjust evil-cursor colors

* Programming Languages Course on Coursera
[[http://tuhdo.github.io/emacs-for-proglang.html][Starter Kit]] from [[https://reddit.com/u/tuhdo][tuhdo]]

** sml-mode
#+BEGIN_SRC emacs-lisp
  (use-package sml-mode
    :config
    (use-package ob-sml
      :ensure nil
      :load-path "bundle/ob-sml"
      :config
      (org-babel-do-load-languages 'org-babel-load-languages
                                   (append org-babel-load-languages '((sml . t))))
      (add-to-list 'org-structure-template-alist
                   '("sml" "#+BEGIN_SRC sml\n?\n#+END_SRC\n" "<src lang=\"?\">\n\n</src>"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :config
    (setq geiser-default-implementation "racket"))
#+END_SRC
