#+TITLE: git configuration
#+PROPERTY: header-args+ :results output silent :noweb tangle :comments both :mkdirp yes
#+TODO: TODO FIXME |

* Resources
:PROPERTIES:
:header-args: :tangle no
:END:
- [[https://medium.com/@willhayjr/the-architecture-and-history-of-git-a-distributed-version-control-system-62b17dd37742][Architecture and History of Git]]
- [[https://rachelcarmena.github.io/2018/12/12/how-to-teach-git.html][How to teach Git]]

** [[https://git-scm.com/docs/gitglossary][Glossary]]
A good way to understand git is to think of the repository as a tree where each commit comprises a node.
This gives rise to the terminology of /trunk/ and /branch/. In git, the trunk is commonly referred to as the /master/.
Technically, all branches are equal. However, one is designated as the default development branch and called /master/.

Furthermore, while all nodes are equal, some are used more often than other and we label them for ease of use.
These labels are nothing but pointers to these nodes the way /head/ and /tail/ are pointers to specific elements of a queue.

|---------------+---------------------------------------------------------------------------------------------------------|
| Labels        | Description                                                                                             |
|---------------+---------------------------------------------------------------------------------------------------------|
| local         | the local repository. Git is a distributed-vcs. Thus, creating a local git workarea is done by /cloning,/ |
|               | implying that the local repository it is functionally identical to the remote one                       |
| remote        | the remote repository                                                                                   |
| upstream      | the repo that the current repo was forked from                                                          |
| origin        | default name of the remote git repository                                                               |
| origin/foo    | foo branch in origin                                                                                    |
| HEAD          | points to the current *branch*. Normally HEAD points to the branch itself and not to a specific commit.   |
|               | However, as the branch itself points to the latest commit, HEAD will as well, unless it's detached      |
| detached HEAD | When we checkout a commit not at the tip of a branch, HEAD points to it and is said to be detached      |
| branch        | A branch always points to the latest commit on it aka tip of the branch or branch head                  |
| master        | the default development branch. Points to the latest commit                                             |
|---------------+---------------------------------------------------------------------------------------------------------|

** [[https://git-scm.com/book/en/v1/Git-Basics-Recording-Changes-to-the-Repository][File Status Lifecycle]]
** Committing
*** Making partial commits
https://coderwall.com/p/ufapcw/git-add-files-by-hunk
Use =git add -p= to commit changes by hunks

** Diff
Syntax: =git diff <FROM> <TO>=

|-------------------------------+-------------------------------------------------------------+------------------------------|
| FROM                          | TO                                                          | Command                      |
|-------------------------------+-------------------------------------------------------------+------------------------------|
| commit1                       | commit2                                                     | git diff <commit1> <commit2> |
|-------------------------------+-------------------------------------------------------------+------------------------------|
| working (default for commit1) | staging area (default for commit2 when commit1 == working)  | git diff                     |
| working (default for commit1) | HEAD                                                        | git diff HEAD                |
| working (default for commit1) | latest commit of the master branch in the remote repository | git diff origin/master       |
|-------------------------------+-------------------------------------------------------------+------------------------------|
| staging area                  | HEAD (default for commit2 when commit1 == staging area)     | git diff --staged            |
|-------------------------------+-------------------------------------------------------------+------------------------------|

Thus, we see that /--staged/ changes the default for commit1 from working to index

NOTE:
- /staging area/ is also known as the /index/
- /--staged/ is synonymous with /--cached/

** Renaming/Moving/Deleting
Using =mv= or =rm= simply makes the changes locally but not the git repo. The file shows up as Changed but not staged.
Hence, we've to explicitly let git know using these instead:
- =git rm= Stages the removal and deletes the file locally
- =git rm --cached= Deletes a staged file but keeps it locally
- =git mv= Move/rename the file

** Undoing
From https://stackoverflow.com/a/15321456/734153.

|--------------+----------------+------------------------|
| FROM         | TO             | Command                |
|--------------+----------------+------------------------|
| HEAD         | staging area   | git reset --soft HEAD^ |
| staging area | working dir    | git reset HEAD         |
| working dir  | previous index | git checkout -- <file> |
|--------------+----------------+------------------------|

NOTE:
- /staging area/ is also known as the /index/
- /--staged/ is synonymous with /--cached/

** Submodules
*** Adding
#+begin_src bash
  git submodule add <git@github...> <path/to/submodule>
#+end_src

*** Removing
From https://davidwalsh.name/git-remove-submodule

1. Delete the relevant section from =.gitmodules=
2. Stage the =.gitmodules= changes using =git add .gitmodules=
3. Delete the relevant section from =.git/config=
4. Run =git rm --cached path/to/submodule= without a trailing slash
5. Run =rm -rf .git/modules/submodule_name=
6. Commit the changes
7. Delete the now untracked submodule files =rm -rf path/to/submodule=

*** Updating
#+begin_src bash
  git submodule update --recursive --remote
#+end_src

*** Sparse checkouts
Refer [[https://briancoyner.github.io/2013/06/05/git-sparse-checkout.html][this]].

** Branches
Each branch that exists always tracks the master and another branch.
Eg. in github, when viewing a branch foo, it mentions how many commits ahead and/or behind it is behind something else, say bar.
In that case, foo is said to be tracking bar

*** Creating a new branch
#+begin_src bash
  git checkout -b branch
#+end_src

When a new branch is created, the files of the new branch are created from that of the current branch/master.
It also inherits any tracking information

#+begin_src bash
  git push origin <branchname>
#+end_src

Once a branch is created locally, we need to push it to the repository.
Here /origin/ refers to the current repository.

*** Updating the tracking
#+begin_src bash
  git branch -u <branch_to_track>
#+end_src

*** Merging branches
Let's say we want to merge the changes from the /dev/ branch back into the /master/ branch

#+begin_src bash
  git checkout master
  git merge dev
#+end_src

**** Syncing a fork from upstream
A common case with a forked repository is to pull the changes from the base repository (/upstream/master/)
#+begin_src bash
  git checkout master
  git fetch upstream/master
  git merge upstream/master
#+end_src

** Specifying Revisions
https://stackoverflow.com/a/2222920/734153

* config
:PROPERTIES:
:header-args+: :tangle ~/.config/git/config
:END:
#+begin_src conf :export none
  # This is a tangled file. Do not make any changes here. All changes should preferably be made in the original Org file.
  # Use =org-babel-tangle-jump-back-to-org= to jump back to it from any code block.
  # If any changes are made here, use =org-babel-detangle= to add it back to the original Org mode file.
#+end_src

https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
https://git-scm.com/docs/git-config.html

- =git config --show-origin --list= shows all settings in effect as well as where they were set from
- =git config --show-origin <section>.<setting>= shows information about a specific setting

** user
#+begin_src conf
  [user]
  name  = Kartik Shenoy
  email = theresmorethanoneway@gmail.com
#+end_src

** core
#+begin_src conf
  [core]
  editor   = gvim --nofork
  fileMode = false
#+end_src

I'm using the default value of =excludesfile= so this is not required. I have it here simply for documenting it
It was generated at https://www.gitignore.io/api/c,c++,dropbox,emacs,vim,tags
#+begin_src conf :tangle no
  excludesfile = ~/.config/git/ignore
#+end_src

Centralize all hooks instead of configuring them on a per-repository basis
#+begin_src conf
  hooksPath = ~/.config/git/hooks/
#+end_src

** color
#+begin_src conf
  [color]
  ui     = auto
  branch = auto
  diff   = auto
  status = auto

  [color "branch"]
  current = green
  remote  = red

  [color "diff"]
  meta = yellow
  frag = magenta
  old = red bold
  new = green
  plain = white

  [color "status"]
  added = yellow
  changed = red
  untracked = cyan
#+end_src

** diff
#+begin_src conf
  [diff]
  tool = gvim

  [difftool]
  prompt = false

  [difftool "gvim"]
  cmd = gvim -df -c 'set columns=260|set lines=62|wincmd =' $LOCAL $BASE 2> /dev/null
  trustExitCode = true

  [difftool "vim"]
  cmd = vim -df -c 'set columns=260|set lines=62|wincmd =' $LOCAL $BASE 2> /dev/null
  trustExitCode = true

  [difftool "meld"]
  cmd = meld --diff $LOCAL $BASE
#+end_src

** merge
#+begin_src conf
  [merge]
  tool = gvim
  conflictstyle = diff3

  [mergetool "meld"]
  cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $MERGED $REMOTE

  [mergetool "gvim"]
  cmd = vim_merge $BASE $REMOTE $LOCAL $MERGED
  trustExitCode = true
#+end_src

** misc
#+begin_src conf
  [credential]
  helper = cache --timeout=3600

  [push]
  default = matching
#+end_src

** aliases
- https://gitlab.com/to1ne/literate-dotfiles/blob/master/git.org
- https://haacked.com/archive/2014/07/28/github-flow-aliases/

Using =!= as prefix allows running any command in the shell and it doesn't have to be a git command.
Thus, if we want to create an alias to run multiple commands by chaining them together, we have to use =!=
#+begin_src conf
  [alias]
  alias = !git config -l | grep alias | cut -c 7-
#+end_src

Open gitconfig file with my default editor
#+begin_src conf
  ec = config --global -e
#+end_src

#+begin_src conf
  d  = diff
  dw = diff --word-diff
  dt = difftool
  mt = mergetool
  cl = clone
  ci = commit
  co = checkout
  br = branch
#+end_src

Aliases for deleting the branch from various places
#+begin_src conf
  br-rm-remote = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git push origin :$branch; }; f"
  br-rm-local  = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git branch -D $branch; }; f"
  br-rm-all    = !"f() { branch=${1-$(git symbolic-ref --short HEAD)}; git push origin :$branch; git branch -D $branch; }; f"
#+end_src

This scrubs away all local branches that are merged.
#+begin_src conf
  br-scrub = !git branch --merged | egrep -v '(^\\*|master)' | xargs git branch -d
#+end_src

#+begin_src conf
  lg = log --color --graph --pretty=format:' %C(yellow)%h %C(bold blue)<%an>%C(reset) %s %C(green)(%cr)%C(reset)%C(red)%d%C(reset)' --abbrev-commit
  ls = log --oneline --decorate
#+end_src

Pull changes from the remote. Any local commits will be rebased to come after the commits from remote. =--prune= option removes remote-tracking branches that no longer exist on the remote.
#+begin_src conf
  sync = !git stash && git pull --rebase --prune && git submodule update --init --recursive && git stash pop
#+end_src

Safer wipes. Using =git reset HEAD --hard= leaves no room for undoing anything.
This commits everything and then does a hard reset to remove that commit. The nice thing is, the commit is still there, but it’s just unreachable. Unreachable commits are a bit inconvenient to restore, but at least they are still there.
I can run the =git reflog= command and find the SHA of the commit if I realize later that I made a mistake with the reset. The commit message will be “WIPE SAVEPOINT” in this case.
#+begin_src conf
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
#+end_src

* Figure out how to create a link to gitignore in the Makefile
:PROPERTIES:
:header-args: :tangle no
:END:
 This would eliminate the need for the setup file

* Local variables
:PROPERTIES:
:header-args: :tangle no
:END:
Use =add-file-local-variable= or =add-file-local-variable-prop-line= instead of adding these manually

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# org-enforce-todo-checkbox-dependencies: nil
# org-enforce-todo-dependencies: nil
# org-refile-targets: ((nil :maxlevel . 9))
# End:
