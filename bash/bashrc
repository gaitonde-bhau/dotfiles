# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# Kartik Shenoy (kartik.shenoy@amd.com)

# shopt -q login_shell && echo "Login shell" || echo "Not a login shell"
# [[ $- == *i* ]] && echo "This is an interactive shell" || echo "This is a script"

umask 002

#=======================================================================================================================
# SHELL CONFIGURATION                                                                                               {{{1
#======================
if [[ $- == *i* ]]; then
  # Shell is interactive
  # Turn off TTY "start" and "stop" commands in all interactive shells.
  # They default to C-q and C-s, Bash uses C-s to do a forward history search.
  stty start ''
  stty stop  ''
  stty -ixon # disable XON/XOFF flow control
  stty ixoff # enable sending (to app) of start/stop characters
  stty ixany # let any character restart output, not only start character
fi

# shopt : https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
#    -s : set
#    -u : unset
#    -q : check whether set/unset

# If set, a command name that is the name of a directory is executed as if it were the argument to the cd command.
shopt -u autocd

# If this is set, an argument to the cd builtin command that is not a directory is assumed to be the name of a variable
# whose value is the directory to change to.
shopt -s cdable_vars

# If set, minor errors in the spelling of a directory component in a cd command will be corrected.
# The errors checked for are transposed characters, a missing character, and a character too many.
# If a correction is found, the corrected path is printed, and the command proceeds.
shopt -s cdspell

# If this is set, Bash checks that a command found in the hash table exists before trying to execute it.
# If a hashed command no longer exists, a normal path search is performed.
shopt -s checkhash

# If set, Bash lists the status of any stopped and running jobs before exiting an interactive shell.
# If any jobs are running, this causes the exit to be deferred until a second exit is attempted
# without an intervening command (see Job Control). The shell always postpones exiting if any jobs are stopped.
shopt -s checkjobs

# If set, Bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, Bash attempts to save all lines of a multiple-line command in the same history entry.
shopt -s cmdhist

# If set, Bash quotes all shell metacharacters in filenames and directory names when performing completion.
# If not set, Bash removes metacharacters such as the dollar sign from the set of characters that will be quoted in
# completed filenames when these metacharacters appear in shell variable references in words to be completed.
# This means that dollar signs in variable names that expand to directories will not be quoted; however,
# any dollar signs appearing in filenames will not be quoted, either.
# This is active only when bash is using backslashes to quote completed filenames.
shopt -s complete_fullquote

# If set, Bash replaces directory names with the results of word expansion when performing filename completion.
# This changes the contents of the readline editing buffer. If not set, Bash attempts to preserve what the user typed.
# shopt -s direxpand

# If set, Bash attempts spelling correction on directory names during word completion if the directory name
# initially supplied does not exist.
shopt -s dirspell

# If set, Bash includes filenames beginning with a ‘.’ in the results of filename expansion.
shopt -s dotglob

# If set, aliases are expanded as described below under Aliases, Aliases.
# shopt -s expand_aliases

# If set, the extended pattern matching features described above (see Pattern Matching) are enabled.
# shopt -s extglob

# If set, patterns which fail to match filenames during filename expansion result in an expansion error.
# shopt -s failglob

# If set, the pattern ‘**’ used in a filename expansion context will match all files and zero or more directories and
# subdirectories. If the pattern is followed by a ‘/’, only directories and subdirectories match.
shopt -s globstar

# If set, shell error messages are written in the standard GNU error message format.
# shopt -s gnu_errfmt

# If set, the history list is appended to the file named by the value of the HISTFILE variable when the shell exits,
# rather than overwriting the file.
shopt -s histappend

# If set, and Readline is being used, a user is given the opportunity to re-edit a failed history substitution.
shopt -s histreedit

# If set, and Readline is being used, the results of history substitution are not immediately passed to the shell parser.
# Instead, the resulting line is loaded into the Readline editing buffer, allowing further modification.
# eg. commands using (!, !!, etc.) will print to shell first for confirmation and not auto-execute
shopt -s histverify

# If set, Bash will send SIGHUP to all jobs when an interactive login shell exits (see Signals).
shopt -s huponexit

# If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background
shopt -s lastpipe

# If enabled, and the cmdhist option is enabled, multi-line commands are saved to the history with embedded newlines
# rather than using semicolon separators where possible.
shopt -s lithist

# If set, and a file that Bash is checking for mail has been accessed since the last time it was checked,
# the message "The mail in mailfile has been read" is displayed.
shopt -s mailwarn

# If set, and Readline is being used, Bash will not attempt to search the PATH for possible completions when completion
# is attempted on an empty line.
# shopt -s no_empty_cmd_completion

# If set, Bash matches filenames in a case-insensitive fashion when performing filename expansion.
# shopt -s nocaseglob

# If set, Bash matches patterns in a case-insensitive fashion when performing matching while executing case or
# [[ conditional commands, when performing pattern substitution word expansions,
# or when filtering possible completions as part of programmable completion.
# shopt -s nocasematch

# If set, Bash allows filename patterns which match no files to expand to a null string, rather than themselves.
# shopt -s nullglob

# If this is set, the shift builtin prints an error message when the shift count exceeds the number of parameters.
shopt -s shift_verbose


set -o noclobber
#set -o vi
set bell-style none
# Otherwise some completions will fail
set +o nounset


#=======================================================================================================================
# COMPLETION                                                                                                        {{{1
#=============
complete -A hostname   rsh rcp telnet rlogin r ftp ping disk
complete -A export     printenv
complete -A variable   export local readonly unset
complete -A enabled    builtin
complete -A alias      alias unalias
complete -A function   function
complete -A user       su mail finger

complete -A helptopic  help     # currently same as builtins
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%' fg jobs disown

complete -A directory  mkdir rmdir
complete -A directory  -o default cd

# Compression
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP)' unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ)'    gzip
complete -f -o default -X '!*.+(gz|GZ)'   gunzip
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2

# Misc filetypes
complete -f -o default -X '!*.ps'  gs ghostview ps2pdf ps2ascii
complete -f -o default -X '!*.dvi' dvips dvipdf xdvi dviselect dvitype
complete -f -o default -X '!*.pdf' acroread pdf2ps
complete -f -o default -X '!*.+(pdf|ps)' gv
complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf
complete -f -o default -X '!*.tex' tex latex slitex
complete -f -o default -X '!*.lyx' lyx
complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps
complete -f -o default -X '!*.pl'  perl perl5
complete -f -o default -X '!*.gv'   dot
complete -f -o default -X '!*.gif'  kview

# Multimedia
#complete -f -o default -X '!*.+(jp*g|gif|xpm|png|bmp)' xv gimp
#complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321
#complete -f -o default -X '!*.+(ogg|OGG)' ogg123

# Default LS_COLORS (Disabled as I use dir_colors)
#export CLICOLOR=1


#=======================================================================================================================
# ENVIRONMENT VARIABLES                                                                                             {{{1
#========================
# History
HISTSIZE=65535
HISTFILESIZE=65535
# Show timestamps in history
HISTTIMEFORMAT="%F %T  "
HISTCONTROL=ignoreboth #same as export HISTCONTROL=ignoredups:ignorespace
# Ignore duplicates and trivial one- and two-char commands
HISTIGNORE='?:??:history*:sosa:sosc:sosf:sosp:cd:que*:lla*:=*'
HOSTNAME="$(hostname)"
# Keeps history forever. Requires PROMPT_COMMAND='history -a; history -r'
# Moving this to PROMPT_COMMAND to keep the HISTFILE current when sessions span multiple days
# HISTFILE="${HOME}/.history_bash/$(date +%Y/%m/%d)_${HOSTNAME%%.*}_${USER}_$$"
# mkdir -p $(dirname ${HISTFILE})

## TERMINAL
# Set terminal to mimic titeInhibit = true
MANPAGER=less
# export PAGER='~/bin/vim --config NONE -u ~/.vim/vimrc_pager'
PAGER=less
EDITOR=vim
VISUAL=gvim

#LESS="-icuf -P?f%f:stdin. [%T] (?pB%pB\%:byte %bB.)"

#GREP_OPTIONS="--color=auto"
GREP_COLOR=32

LANG=en_US.UTF-8

# Ack
#ACK_OPTIONS='--color-filename=COLOR --color-match=COLOR --color-lineno=COLOR --type-add verilog:ext:.sv,.svh,.v'
#ACK_OPTIONS='--type-set verilog=.sv,.svh,.v'


#=======================================================================================================================
# MISC SETTINGS                                                                                                     {{{1
#================

# Make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "$debian_chroot" ]] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi


#=======================================================================================================================
# BINDINGS                                                                                                          {{{1
#===========


#=======================================================================================================================
# EXTERNAL CUSTOMISATIONS                                                                                           {{{1
#==========================

# If not running interactively, don't do anything
[[ -z "$PS1" ]] && return

# ls uses the value of the environment variable LS_COLORS to display
# dircolors is a tool to set LS_COLORS
if [[ -x /usr/bin/dircolors ]]; then
  [[ -r ~/.dircolors ]] && eval "$(/usr/bin/dircolors -b ${HOME}/.dircolors)" || eval "$(/usr/bin/dircolors -b)"
fi

if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
  . /etc/bash_completion
fi

for i in \
  ~/.dotfiles/bash/bashrc-func          \
  ~/.dotfiles/bash/bashrc-prompt        \
  ~/.bashrc_local                       \
  ~/.dotfiles/aliases                   \
  ~/.fzf.bash                           \
  ~/.dotfiles/tmux/tmux_completion_bash \
  ; do
  if [[ -f ${i} ]]; then
  # echo "  Sourcing ${i} ..."
  . ${i}
  # echo "  ... done"
  fi
done
# }}}1


# Base16 Color scheme for terminal
BASE16_SHELL=$HOME/.config/base16-shell
[[ -n "$PS1" ]] && [[ -s $BASE16_SHELL/profile_helper.sh ]] && eval "$($BASE16_SHELL/profile_helper.sh)"


# Keep PATH customizations at the end
# Ruby gem path
if ((which ruby &> /dev/null) && (which gem &> /dev/null)); then
  PATH="$(ruby -rubygems -e 'puts Gem.user_dir')/bin":$PATH
fi
PATH=${HOME}/bin:$PATH


# Automatically add completion for all aliases to commands having completion functions. Should be called at the end
alias_completion
